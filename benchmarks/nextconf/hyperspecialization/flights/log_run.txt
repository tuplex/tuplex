[2022-06-06 22:00:40.120] [memory] [info] allocated bitmap managed memory region (2.00 GB, 32.00 MB block size)
[2022-06-06 22:00:40.121] [aws-lambda] [info] Execution over lambda with 10000MB
[2022-06-06 22:00:40.121] [aws-lambda] [info] Adjusted lambda size to 10000MB
[2022-06-06 22:00:40.243] [aws-lambda] [info] Found AWS Lambda function tuplex-lambda-runner (10000MB)
[2022-06-06 22:00:40.243] [aws-lambda] [info] Using Lambda running on x86_64
[2022-06-06 22:00:40.394] [fileinputoperator] [info] found 12 files (2.70 GB) to process.
[2022-06-06 22:00:40.586] [global] [info] sampled s3://tuplex-public/data/flights_all/flights_on_time_performance_2003_01.csv on 256.00 KB
[2022-06-06 22:00:41.028] [global] [info] sampled s3://tuplex-public/data/flights_all/flights_on_time_performance_2003_12.csv on 256.00 KB
[2022-06-06 22:00:41.781] [logical planner] [info] logical optimization took 0.022323ms
[2022-06-06 22:00:42.063] [global] [info] sampled s3://tuplex-public/data/flights_all/flights_on_time_performance_2003_01.csv on 256.00 KB
[2022-06-06 22:00:42.355] [global] [warning] requested 2000 rows for sampling, but only 1179 stored. Consider decreasing sample size.
0: YEAR
1: MONTH
2: DAY_OF_MONTH
3: OP_UNIQUE_CARRIER
4: OP_CARRIER_FL_NUM
5: ORIGIN_AIRPORT_ID
6: DEST_AIRPORT_ID
7: CRS_DEP_TIME
8: DEP_DELAY
9: CRS_ARR_TIME
10: ARR_DELAY
11: CRS_ELAPSED_TIME
12: DISTANCE
13: CARRIER_DELAY
14: WEATHER_DELAY
15: NAS_DELAY
16: SECURITY_DELAY
17: LATE_AIRCRAFT_DELAY
1: (null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null)
1: (i64,i64,i64,i64,i64,str,str,i64,str,str,i64,i64,i64,i64,str,str,str,i64,str,i64,i64,i64,i64,str,str,str,i64,str,i64,i64,i64,f64,f64,f64,i64,str,i64)
1: (i64,i64,i64,i64,i64,str,str,i64,str,str,i64,i64,i64,i64,str,str,str,i64,str,i64,i64,i64,i64,str,str,str,i64,str,i64,i64,i64,f64,f64,f64,i64,str,f64,i64,null,null,i64,null,null,null,null,null,str,f64,null,f64,f64,null,null,f64,f64,i64,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null)
13: (i64,i64,i64,i64,i64,str,str,i64,str,null,i64,i64,i64,i64,str,str,str,i64,str,i64,i64,i64,i64,str,str,str,i64,str,i64,i64,null,null,null,null,null,str,null,null,null,null,i64,null,null,null,null,null,str,f64,null,f64,f64,null,null,f64,f64,i64,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null)
1: (str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,null)
1162: (i64,i64,i64,i64,i64,str,str,i64,str,str,i64,i64,i64,i64,str,str,str,i64,str,i64,i64,i64,i64,str,str,str,i64,str,i64,i64,i64,f64,f64,f64,i64,str,f64,i64,i64,f64,i64,i64,f64,f64,f64,i64,str,f64,null,f64,f64,f64,f64,f64,f64,i64,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null)
col 0: i64 (1177), str (1), 
col 1: i64 (1177), str (1), 
col 2: i64 (1177), str (1), 
col 3: i64 (1177), str (1), 
col 4: i64 (1177), str (1), 
col 5: str (1178), null (1), 
col 6: str (1178), null (1), 
col 7: i64 (1177), str (1), 
col 8: str (1178), null (1), 
col 9: str (1165), null (14), 
col 10: i64 (1177), str (1), 
col 11: i64 (1177), str (1), 
col 12: i64 (1177), str (1), 
col 13: i64 (1177), str (1), 
col 14: str (1178), null (1), 
col 15: str (1178), null (1), 
col 16: str (1178), null (1), 
col 17: i64 (1177), str (1), 
col 18: str (1178), null (1), 
col 19: i64 (1177), null (1), 
col 20: i64 (1177), str (1), 
col 21: i64 (1177), str (1), 
col 22: i64 (1177), str (1), 
col 23: str (1178), null (1), 
col 24: str (1178), null (1), 
col 25: str (1178), null (1), 
col 26: i64 (1177), str (1), 
col 27: str (1178), null (1), 
col 28: i64 (1177), null (1), 
col 29: i64 (1177), null (1), 
col 30: i64 (1164), null (14), str (1), 
col 31: f64 (1164), null (14), str (1), 
col 32: f64 (1164), null (14), str (1), 
col 33: f64 (1164), null (14), str (1), 
col 34: i64 (1164), null (14), str (1), 
col 35: str (1178), null (1), 
col 36: f64 (1163), null (14), str (1), 
col 37: i64 (1163), null (14), str (1), 
col 38: i64 (1162), null (15), str (1), 
col 39: f64 (1162), null (15), str (1), 
col 40: i64 (1176), str (1), 
col 41: i64 (1162), null (15), str (1), 
col 42: f64 (1162), null (14), str (1), 
col 43: f64 (1162), null (14), str (1), 
col 44: f64 (1162), null (14), str (1), 
col 45: i64 (1162), null (14), str (1), 
col 46: str (1177), 
col 47: f64 (1176), str (1), 
col 48: null (1176), str (1), 
col 49: f64 (1176), str (1), 
col 50: f64 (1176), str (1), 
col 51: f64 (1162), null (14), str (1), 
col 52: f64 (1162), null (14), str (1), 
col 53: f64 (1176), str (1), 
col 54: f64 (1176), str (1), 
col 55: i64 (1176), str (1), 
col 56: null (1176), str (1), 
col 57: null (1176), str (1), 
col 58: null (1176), str (1), 
col 59: null (1176), str (1), 
col 60: null (1176), str (1), 
col 61: null (1176), str (1), 
col 62: null (1176), str (1), 
col 63: null (1176), str (1), 
col 64: null (1176), str (1), 
col 65: null (1176), str (1), 
col 66: null (1176), str (1), 
col 67: null (1176), str (1), 
col 68: null (1176), str (1), 
col 69: null (1176), str (1), 
col 70: null (1176), str (1), 
col 71: null (1176), str (1), 
col 72: null (1176), str (1), 
col 73: null (1176), str (1), 
col 74: null (1176), str (1), 
col 75: null (1176), str (1), 
col 76: null (1176), str (1), 
col 77: null (1176), str (1), 
col 78: null (1176), str (1), 
col 79: null (1176), str (1), 
col 80: null (1176), str (1), 
col 81: null (1176), str (1), 
col 82: null (1176), str (1), 
col 83: null (1176), str (1), 
col 84: null (1176), str (1), 
col 85: null (1176), str (1), 
col 86: null (1176), str (1), 
col 87: null (1176), str (1), 
col 88: null (1176), str (1), 
col 89: null (1176), str (1), 
col 90: null (1176), str (1), 
col 91: null (1176), str (1), 
col 92: null (1176), str (1), 
col 93: null (1176), str (1), 
col 94: null (1176), str (1), 
col 95: null (1176), str (1), 
col 96: null (1176), str (1), 
col 97: null (1176), str (1), 
col 98: null (1176), str (1), 
col 99: null (1176), str (1), 
col 100: null (1176), str (1), 
col 101: null (1176), str (1), 
col 102: null (1176), str (1), 
col 103: null (1176), str (1), 
col 104: null (1176), str (1), 
col 105: null (1176), str (1), 
col 106: null (1176), str (1), 
col 107: null (1176), str (1), 
col 108: null (1176), str (1), 
col 109: null (1177), 

Majority detected row type is: (i64,i64,i64,i64,i64,Option[str],Option[str],i64,Option[str],Option[str],i64,i64,i64,i64,Option[str],Option[str],Option[str],i64,Option[str],Option[i64],i64,i64,i64,Option[str],Option[str],Option[str],i64,Option[str],Option[i64],Option[i64],Option[i64],Option[f64],Option[f64],Option[f64],Option[i64],Option[str],Option[f64],Option[i64],Option[i64],Option[f64],i64,Option[i64],Option[f64],Option[f64],Option[f64],Option[i64],str,f64,Option[str],f64,f64,Option[f64],Option[f64],f64,f64,i64,Option[str],Option[str],Option[str],Option[str],Option[str],Option[str],Option[str],Option[str],Option[str],Option[str],Option[str],Option[str],Option[str],Option[str],Option[str],Option[str],Option[str],Option[str],Option[str],Option[str],Option[str],Option[str],Option[str],Option[str],Option[str],Option[str],Option[str],Option[str],Option[str],Option[str],Option[str],Option[str],Option[str],Option[str],Option[str],Option[str],Option[str],Option[str],Option[str],Option[str],Option[str],Option[str],Option[str],Option[str],Option[str],Option[str],Option[str],Option[str],Option[str],Option[str],Option[str],Option[str],Option[str],null)
[2022-06-06 22:00:42.481] [specializing stage optimizer] [info] performing Retyping
[2022-06-06 22:00:42.481] [specializing stage optimizer] [info] Row type before retype: (i64,i64,i64,str,i64,i64,i64,i64,f64,i64,f64,f64,f64,Option[str],Option[str],Option[str],Option[str],Option[str])
[2022-06-06 22:00:42.481] [specializing stage optimizer] [info] Row type after retype: (i64,i64,i64,Option[str],i64,i64,i64,Option[i64],Option[f64],i64,Option[f64],f64,f64,Option[str],Option[str],Option[str],Option[str],Option[str])
[2022-06-06 22:00:42.495] [codegen] [error] Provided incompatible rowtype to retype csv, provided type has 18 columns but optimized schema in operator has 110 columns
(unoptimized) output schema of input op: (i64,i64,i64,str,i64,i64,i64,i64,f64,i64,f64,f64,f64,Option[str],Option[str],Option[str],Option[str],Option[str])
(optimized) output schema of input op: (i64,i64,i64,str,i64,i64,i64,i64,f64,i64,f64,f64,f64,Option[str],Option[str],Option[str],Option[str],Option[str])
[2022-06-06 22:00:42.540] [physical planner] [info] specialized to input:  (i64,i64,i64,str,i64,i64,i64,i64,f64,i64,f64,f64,f64,Option[str],Option[str],Option[str],Option[str],Option[str])
[2022-06-06 22:00:42.540] [physical planner] [info] specialized to output: (i64,i64,i64,Option[str],i64,i64,i64,f64,Option[f64],Option[f64],Option[f64],Option[f64],Option[f64],Option[f64],Option[f64])
[2022-06-06 22:00:42.540] [physical planner] [info] specialized code reads: 18 columns
[2022-06-06 22:00:42.540] [physical planner] [info] Specialized stage in 757.902803ms
[2022-06-06 22:00:42.541] [codegen] [info] generating pipeline for (i64,i64,i64,str,i64,i64,i64,i64,f64,i64,f64,f64,f64,Option[str],Option[str],Option[str],Option[str],Option[str]) -> (i64,i64,i64,Option[str],i64,i64,i64,f64,Option[f64],Option[f64],Option[f64],Option[f64],Option[f64],Option[f64],Option[f64]) (1 operator pipelined)
[2022-06-06 22:00:42.543] [codegen] [info] generating function fill_in_delays for ((i64,i64,i64,Option[str],i64,i64,i64,Option[i64],Option[f64],i64,Option[f64],f64,f64,Option[str],Option[str],Option[str],Option[str],Option[str])) -> (i64,i64,i64,Option[str],i64,i64,i64,f64,Option[f64],Option[f64],Option[f64],Option[f64],Option[f64],Option[f64],Option[f64])
[2022-06-06 22:00:42.554] [codegen] [warning] hack, need to fix stuff here...
[2022-06-06 22:00:42.558] [codegen] [error] could not verify function fast_processRow_Stage_0. Details: Call parameter type does not match function signature!
  %4 = alloca %struct.tuple
 %struct.tuple.1*  %147 = call i64 @fill_in_delays(%struct.tuple.0* %103, %struct.tuple* %4)

function @fill_in_delays: struct.tuple.1 -> struct.tuple.0
corresponds to: (i64,i64,i64,Option[str],i64,i64,i64,Option[i64],Option[f64],i64,Option[f64],f64,f64,Option[str],Option[str],Option[str],Option[str],Option[str]) -> (i64,i64,i64,Option[str],i64,i64,i64,f64,Option[f64],Option[f64],Option[f64],Option[f64],Option[f64],Option[f64],Option[f64])
struct.tuple: (i64,i64,i64,str,i64,i64,i64,i64,f64,i64,f64,f64,f64,Option[str],Option[str],Option[str],Option[str],Option[str])
struct.tuple.0: (i64,i64,i64,Option[str],i64,i64,i64,f64,Option[f64],Option[f64],Option[f64],Option[f64],Option[f64],Option[f64],Option[f64])
struct.tuple.1: (i64,i64,i64,Option[str],i64,i64,i64,Option[i64],Option[f64],i64,Option[f64],f64,f64,Option[str],Option[str],Option[str],Option[str],Option[str])

; ModuleID = 'tuplex_fastCodePath'
source_filename = "tuplex_fastCodePath"

%struct.tuple = type { [5 x i1], i64, i64, i64, i8*, i64, i64, i64, i64, double, i64, double, double, double, i8*, i8*, i8*, i8*, i8*, i64, i64, i64, i64, i64, i64 }
%struct.tuple.0 = type { [8 x i1], i64, i64, i64, i8*, i64, i64, i64, double, double, double, double, double, double, double, double, i64 }
%struct.tuple.1 = type { [9 x i1], i64, i64, i64, i8*, i64, i64, i64, i64, double, i64, double, double, double, i8*, i8*, i8*, i8*, i8*, i64, i64, i64, i64, i64, i64 }
%struct.tuple.6 = type { [8 x i1], i64, i64, i64, i8*, i64, i64, i64, double, double, double, i8*, i8*, i8*, i8*, i8*, i64, i64, i64, i64, i64, i64 }
%struct.tuple.5 = type { [3 x i1], i64, i64, i64, i8*, i64, i64, i64, double, double, double, double, double, double, double, double, i64 }
%struct.tuple.4 = type { [4 x i1], i64, i64, i64, i8*, i64, i64, i64, double, double, double, double, i64 }
%struct.tuple.3 = type { [3 x i1], i64, i64, i64, i8*, i64, i64, i64, double, double, double, i64 }
%struct.tuple.2 = type { [2 x i1], i64, i64, i64, i8*, i64, i64, i64, double, double, i64 }

@0 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@1 = private unnamed_addr constant [5 x i8] c"true\00", align 1
@2 = private unnamed_addr constant [6 x i8] c"false\00", align 1

define i64 @initGlobal() {
initGlobalEntry:
  %0 = alloca i64
  store i64 0, i64* %0
  %1 = load i64, i64* %0
  %2 = icmp ne i64 %1, 0
  br i1 %2, label %initGlobalReturn, label %init_closure_block

init_closure_block:                               ; preds = %initGlobalEntry
  %3 = load i64, i64* %0
  %4 = icmp ne i64 %3, 0
  br i1 %4, label %initGlobalReturn, label %initGlobalReturn

initGlobalReturn:                                 ; preds = %init_closure_block, %init_closure_block, %initGlobalEntry
  %5 = load i64, i64* %0
  ret i64 %5
}

define i64 @releaseGlobal() {
releaseGlobalEntry:
  %0 = alloca i64
  store i64 0, i64* %0
  %1 = load i64, i64* %0
  %2 = icmp ne i64 %1, 0
  br i1 %2, label %releaseGlobalReturn, label %releaseGlobalReturn

releaseGlobalReturn:                              ; preds = %releaseGlobalEntry, %releaseGlobalEntry
  %3 = load i64, i64* %0
  ret i64 %3
}

define i64 @fast_init_Stage_0(i64, i8**, i8**) {
}

define i64 @fast_release_Stage_0() {
}

define internal void @fast_processRow_Stage_0({ i32, i32, i32 }* noalias sret, i8*, %struct.tuple*, i64) {
constructors:
  %quoted_str_size = alloca i64
  %4 = alloca %struct.tuple
  %5 = alloca %struct.tuple
  %exceptionCode = alloca i64
  store i64 0, i64* %exceptionCode
  %exceptionOperatorID = alloca i64
  %numOutputRows = alloca i64
  store i64 0, i64* %numOutputRows
  %6 = getelementptr inbounds %struct.tuple, %struct.tuple* %2, i32 0, i32 1
  %7 = load i64, i64* %6
  %8 = getelementptr inbounds %struct.tuple, %struct.tuple* %2, i32 0, i32 2
  %9 = load i64, i64* %8
  %10 = getelementptr inbounds %struct.tuple, %struct.tuple* %2, i32 0, i32 3
  %11 = load i64, i64* %10
  %12 = getelementptr inbounds %struct.tuple, %struct.tuple* %2, i32 0, i32 4
  %13 = load i8*, i8** %12
  %14 = getelementptr inbounds %struct.tuple, %struct.tuple* %2, i32 0, i32 19
  %15 = load i64, i64* %14
  %16 = getelementptr inbounds %struct.tuple, %struct.tuple* %2, i32 0, i32 5
  %17 = load i64, i64* %16
  %18 = getelementptr inbounds %struct.tuple, %struct.tuple* %2, i32 0, i32 6
  %19 = load i64, i64* %18
  %20 = getelementptr inbounds %struct.tuple, %struct.tuple* %2, i32 0, i32 7
  %21 = load i64, i64* %20
  %22 = getelementptr inbounds %struct.tuple, %struct.tuple* %2, i32 0, i32 8
  %23 = load i64, i64* %22
  %24 = getelementptr inbounds %struct.tuple, %struct.tuple* %2, i32 0, i32 9
  %25 = load double, double* %24
  %26 = getelementptr inbounds %struct.tuple, %struct.tuple* %2, i32 0, i32 10
  %27 = load i64, i64* %26
  %28 = getelementptr inbounds %struct.tuple, %struct.tuple* %2, i32 0, i32 11
  %29 = load double, double* %28
  %30 = getelementptr inbounds %struct.tuple, %struct.tuple* %2, i32 0, i32 12
  %31 = load double, double* %30
  %32 = getelementptr inbounds %struct.tuple, %struct.tuple* %2, i32 0, i32 13
  %33 = load double, double* %32
  %34 = getelementptr inbounds %struct.tuple, %struct.tuple* %2, i32 0, i32 0
  %35 = getelementptr inbounds [5 x i1], [5 x i1]* %34, i64 0, i64 0
  %36 = load i1, i1* %35
  %37 = getelementptr inbounds %struct.tuple, %struct.tuple* %2, i32 0, i32 14
  %38 = load i8*, i8** %37
  %39 = getelementptr inbounds %struct.tuple, %struct.tuple* %2, i32 0, i32 20
  %40 = load i64, i64* %39
  %41 = getelementptr inbounds %struct.tuple, %struct.tuple* %2, i32 0, i32 0
  %42 = getelementptr inbounds [5 x i1], [5 x i1]* %41, i64 0, i64 1
  %43 = load i1, i1* %42
  %44 = getelementptr inbounds %struct.tuple, %struct.tuple* %2, i32 0, i32 15
  %45 = load i8*, i8** %44
  %46 = getelementptr inbounds %struct.tuple, %struct.tuple* %2, i32 0, i32 21
  %47 = load i64, i64* %46
  %48 = getelementptr inbounds %struct.tuple, %struct.tuple* %2, i32 0, i32 0
  %49 = getelementptr inbounds [5 x i1], [5 x i1]* %48, i64 0, i64 2
  %50 = load i1, i1* %49
  %51 = getelementptr inbounds %struct.tuple, %struct.tuple* %2, i32 0, i32 16
  %52 = load i8*, i8** %51
  %53 = getelementptr inbounds %struct.tuple, %struct.tuple* %2, i32 0, i32 22
  %54 = load i64, i64* %53
  %55 = getelementptr inbounds %struct.tuple, %struct.tuple* %2, i32 0, i32 0
  %56 = getelementptr inbounds [5 x i1], [5 x i1]* %55, i64 0, i64 3
  %57 = load i1, i1* %56
  %58 = getelementptr inbounds %struct.tuple, %struct.tuple* %2, i32 0, i32 17
  %59 = load i8*, i8** %58
  %60 = getelementptr inbounds %struct.tuple, %struct.tuple* %2, i32 0, i32 23
  %61 = load i64, i64* %60
  %62 = getelementptr inbounds %struct.tuple, %struct.tuple* %2, i32 0, i32 0
  %63 = getelementptr inbounds [5 x i1], [5 x i1]* %62, i64 0, i64 4
  %64 = load i1, i1* %63
  %65 = getelementptr inbounds %struct.tuple, %struct.tuple* %2, i32 0, i32 18
  %66 = load i8*, i8** %65
  %67 = getelementptr inbounds %struct.tuple, %struct.tuple* %2, i32 0, i32 24
  %68 = load i64, i64* %67
  %69 = getelementptr inbounds %struct.tuple, %struct.tuple* %5, i32 0, i32 1
  store i64 %7, i64* %69
  %70 = getelementptr inbounds %struct.tuple, %struct.tuple* %5, i32 0, i32 2
  store i64 %9, i64* %70
  %71 = getelementptr inbounds %struct.tuple, %struct.tuple* %5, i32 0, i32 3
  store i64 %11, i64* %71
  %72 = getelementptr inbounds %struct.tuple, %struct.tuple* %5, i32 0, i32 4
  store i8* %13, i8** %72
  %73 = getelementptr inbounds %struct.tuple, %struct.tuple* %5, i32 0, i32 19
  store i64 %15, i64* %73
  %74 = getelementptr inbounds %struct.tuple, %struct.tuple* %5, i32 0, i32 5
  store i64 %17, i64* %74
  %75 = getelementptr inbounds %struct.tuple, %struct.tuple* %5, i32 0, i32 6
  store i64 %19, i64* %75
  %76 = getelementptr inbounds %struct.tuple, %struct.tuple* %5, i32 0, i32 7
  store i64 %21, i64* %76
  %77 = getelementptr inbounds %struct.tuple, %struct.tuple* %5, i32 0, i32 8
  store i64 %23, i64* %77
  %78 = getelementptr inbounds %struct.tuple, %struct.tuple* %5, i32 0, i32 9
  store double %25, double* %78
  %79 = getelementptr inbounds %struct.tuple, %struct.tuple* %5, i32 0, i32 10
  store i64 %27, i64* %79
  %80 = getelementptr inbounds %struct.tuple, %struct.tuple* %5, i32 0, i32 11
  store double %29, double* %80
  %81 = getelementptr inbounds %struct.tuple, %struct.tuple* %5, i32 0, i32 12
  store double %31, double* %81
  %82 = getelementptr inbounds %struct.tuple, %struct.tuple* %5, i32 0, i32 13
  store double %33, double* %82
  %83 = getelementptr inbounds %struct.tuple, %struct.tuple* %5, i32 0, i32 0
  %84 = getelementptr inbounds [5 x i1], [5 x i1]* %83, i64 0, i64 0
  store i1 %36, i1* %84
  %85 = getelementptr inbounds %struct.tuple, %struct.tuple* %5, i32 0, i32 14
  store i8* %38, i8** %85
  %86 = getelementptr inbounds %struct.tuple, %struct.tuple* %5, i32 0, i32 20
  store i64 %40, i64* %86
  %87 = getelementptr inbounds %struct.tuple, %struct.tuple* %5, i32 0, i32 0
  %88 = getelementptr inbounds [5 x i1], [5 x i1]* %87, i64 0, i64 1
  store i1 %43, i1* %88
  %89 = getelementptr inbounds %struct.tuple, %struct.tuple* %5, i32 0, i32 15
  store i8* %45, i8** %89
  %90 = getelementptr inbounds %struct.tuple, %struct.tuple* %5, i32 0, i32 21
  store i64 %47, i64* %90
  %91 = getelementptr inbounds %struct.tuple, %struct.tuple* %5, i32 0, i32 0
  %92 = getelementptr inbounds [5 x i1], [5 x i1]* %91, i64 0, i64 2
  store i1 %50, i1* %92
  %93 = getelementptr inbounds %struct.tuple, %struct.tuple* %5, i32 0, i32 16
  store i8* %52, i8** %93
  %94 = getelementptr inbounds %struct.tuple, %struct.tuple* %5, i32 0, i32 22
  store i64 %54, i64* %94
  %95 = getelementptr inbounds %struct.tuple, %struct.tuple* %5, i32 0, i32 0
  %96 = getelementptr inbounds [5 x i1], [5 x i1]* %95, i64 0, i64 3
  store i1 %57, i1* %96
  %97 = getelementptr inbounds %struct.tuple, %struct.tuple* %5, i32 0, i32 17
  store i8* %59, i8** %97
  %98 = getelementptr inbounds %struct.tuple, %struct.tuple* %5, i32 0, i32 23
  store i64 %61, i64* %98
  %99 = getelementptr inbounds %struct.tuple, %struct.tuple* %5, i32 0, i32 0
  %100 = getelementptr inbounds [5 x i1], [5 x i1]* %99, i64 0, i64 4
  store i1 %64, i1* %100
  %101 = getelementptr inbounds %struct.tuple, %struct.tuple* %5, i32 0, i32 18
  store i8* %66, i8** %101
  %102 = getelementptr inbounds %struct.tuple, %struct.tuple* %5, i32 0, i32 24
  store i64 %68, i64* %102
  %103 = alloca %struct.tuple.0
  br label %entry

destructors:                                      ; preds = %except, %"cell(14)_done"
  %104 = load i64, i64* %exceptionCode
  %105 = load i64, i64* %exceptionOperatorID
  %106 = load i64, i64* %numOutputRows
  %107 = trunc i64 %104 to i32
  %108 = trunc i64 %105 to i32
  %109 = trunc i64 %106 to i32
  %110 = getelementptr inbounds { i32, i32, i32 }, { i32, i32, i32 }* %0, i32 0, i32 0
  %111 = getelementptr inbounds { i32, i32, i32 }, { i32, i32, i32 }* %0, i32 0, i32 1
  %112 = getelementptr inbounds { i32, i32, i32 }, { i32, i32, i32 }* %0, i32 0, i32 2
  store i32 %107, i32* %110
  store i32 %108, i32* %111
  store i32 %109, i32* %112
  ret void

entry:                                            ; preds = %constructors
  store i64 100001, i64* %exceptionOperatorID
  %113 = getelementptr inbounds %struct.tuple, %struct.tuple* %4, i32 0, i32 1
  store i64 %7, i64* %113
  %114 = getelementptr inbounds %struct.tuple, %struct.tuple* %4, i32 0, i32 2
  store i64 %9, i64* %114
  %115 = getelementptr inbounds %struct.tuple, %struct.tuple* %4, i32 0, i32 3
  store i64 %11, i64* %115
  %116 = getelementptr inbounds %struct.tuple, %struct.tuple* %4, i32 0, i32 4
  store i8* %13, i8** %116
  %117 = getelementptr inbounds %struct.tuple, %struct.tuple* %4, i32 0, i32 19
  store i64 %15, i64* %117
  %118 = getelementptr inbounds %struct.tuple, %struct.tuple* %4, i32 0, i32 5
  store i64 %17, i64* %118
  %119 = getelementptr inbounds %struct.tuple, %struct.tuple* %4, i32 0, i32 6
  store i64 %19, i64* %119
  %120 = getelementptr inbounds %struct.tuple, %struct.tuple* %4, i32 0, i32 7
  store i64 %21, i64* %120
  %121 = getelementptr inbounds %struct.tuple, %struct.tuple* %4, i32 0, i32 8
  store i64 %23, i64* %121
  %122 = getelementptr inbounds %struct.tuple, %struct.tuple* %4, i32 0, i32 9
  store double %25, double* %122
  %123 = getelementptr inbounds %struct.tuple, %struct.tuple* %4, i32 0, i32 10
  store i64 %27, i64* %123
  %124 = getelementptr inbounds %struct.tuple, %struct.tuple* %4, i32 0, i32 11
  store double %29, double* %124
  %125 = getelementptr inbounds %struct.tuple, %struct.tuple* %4, i32 0, i32 12
  store double %31, double* %125
  %126 = getelementptr inbounds %struct.tuple, %struct.tuple* %4, i32 0, i32 13
  store double %33, double* %126
  %127 = getelementptr inbounds %struct.tuple, %struct.tuple* %4, i32 0, i32 0
  %128 = getelementptr inbounds [5 x i1], [5 x i1]* %127, i64 0, i64 0
  store i1 %36, i1* %128
  %129 = getelementptr inbounds %struct.tuple, %struct.tuple* %4, i32 0, i32 14
  store i8* %38, i8** %129
  %130 = getelementptr inbounds %struct.tuple, %struct.tuple* %4, i32 0, i32 20
  store i64 %40, i64* %130
  %131 = getelementptr inbounds %struct.tuple, %struct.tuple* %4, i32 0, i32 0
  %132 = getelementptr inbounds [5 x i1], [5 x i1]* %131, i64 0, i64 1
  store i1 %43, i1* %132
  %133 = getelementptr inbounds %struct.tuple, %struct.tuple* %4, i32 0, i32 15
  store i8* %45, i8** %133
  %134 = getelementptr inbounds %struct.tuple, %struct.tuple* %4, i32 0, i32 21
  store i64 %47, i64* %134
  %135 = getelementptr inbounds %struct.tuple, %struct.tuple* %4, i32 0, i32 0
  %136 = getelementptr inbounds [5 x i1], [5 x i1]* %135, i64 0, i64 2
  store i1 %50, i1* %136
  %137 = getelementptr inbounds %struct.tuple, %struct.tuple* %4, i32 0, i32 16
  store i8* %52, i8** %137
  %138 = getelementptr inbounds %struct.tuple, %struct.tuple* %4, i32 0, i32 22
  store i64 %54, i64* %138
  %139 = getelementptr inbounds %struct.tuple, %struct.tuple* %4, i32 0, i32 0
  %140 = getelementptr inbounds [5 x i1], [5 x i1]* %139, i64 0, i64 3
  store i1 %57, i1* %140
  %141 = getelementptr inbounds %struct.tuple, %struct.tuple* %4, i32 0, i32 17
  store i8* %59, i8** %141
  %142 = getelementptr inbounds %struct.tuple, %struct.tuple* %4, i32 0, i32 23
  store i64 %61, i64* %142
  %143 = getelementptr inbounds %struct.tuple, %struct.tuple* %4, i32 0, i32 0
  %144 = getelementptr inbounds [5 x i1], [5 x i1]* %143, i64 0, i64 4
  store i1 %64, i1* %144
  %145 = getelementptr inbounds %struct.tuple, %struct.tuple* %4, i32 0, i32 18
  store i8* %66, i8** %145
  %146 = getelementptr inbounds %struct.tuple, %struct.tuple* %4, i32 0, i32 24
  store i64 %68, i64* %146
  %147 = call i64 @fill_in_delays(%struct.tuple.0* %103, %struct.tuple* %4)
  store i64 %147, i64* %exceptionCode
  %148 = icmp eq i64 %147, 0
  br i1 %148, label %normal, label %except

except:                                           ; preds = %entry
  store i64 1, i64* %numOutputRows
  br label %destructors

normal:                                           ; preds = %entry
  %149 = getelementptr inbounds %struct.tuple.0, %struct.tuple.0* %103, i32 0, i32 1
  %150 = load i64, i64* %149
  %151 = getelementptr inbounds %struct.tuple.0, %struct.tuple.0* %103, i32 0, i32 2
  %152 = load i64, i64* %151
  %153 = getelementptr inbounds %struct.tuple.0, %struct.tuple.0* %103, i32 0, i32 3
  %154 = load i64, i64* %153
  %155 = getelementptr inbounds %struct.tuple.0, %struct.tuple.0* %103, i32 0, i32 0
  %156 = getelementptr inbounds [8 x i1], [8 x i1]* %155, i64 0, i64 0
  %157 = load i1, i1* %156
  %158 = getelementptr inbounds %struct.tuple.0, %struct.tuple.0* %103, i32 0, i32 4
  %159 = load i8*, i8** %158
  %160 = getelementptr inbounds %struct.tuple.0, %struct.tuple.0* %103, i32 0, i32 16
  %161 = load i64, i64* %160
  %162 = getelementptr inbounds %struct.tuple.0, %struct.tuple.0* %103, i32 0, i32 5
  %163 = load i64, i64* %162
  %164 = getelementptr inbounds %struct.tuple.0, %struct.tuple.0* %103, i32 0, i32 6
  %165 = load i64, i64* %164
  %166 = getelementptr inbounds %struct.tuple.0, %struct.tuple.0* %103, i32 0, i32 7
  %167 = load i64, i64* %166
  %168 = getelementptr inbounds %struct.tuple.0, %struct.tuple.0* %103, i32 0, i32 8
  %169 = load double, double* %168
  %170 = getelementptr inbounds %struct.tuple.0, %struct.tuple.0* %103, i32 0, i32 0
  %171 = getelementptr inbounds [8 x i1], [8 x i1]* %170, i64 0, i64 1
  %172 = load i1, i1* %171
  %173 = getelementptr inbounds %struct.tuple.0, %struct.tuple.0* %103, i32 0, i32 9
  %174 = load double, double* %173
  %175 = getelementptr inbounds %struct.tuple.0, %struct.tuple.0* %103, i32 0, i32 0
  %176 = getelementptr inbounds [8 x i1], [8 x i1]* %175, i64 0, i64 2
  %177 = load i1, i1* %176
  %178 = getelementptr inbounds %struct.tuple.0, %struct.tuple.0* %103, i32 0, i32 10
  %179 = load double, double* %178
  %180 = getelementptr inbounds %struct.tuple.0, %struct.tuple.0* %103, i32 0, i32 0
  %181 = getelementptr inbounds [8 x i1], [8 x i1]* %180, i64 0, i64 3
  %182 = load i1, i1* %181
  %183 = getelementptr inbounds %struct.tuple.0, %struct.tuple.0* %103, i32 0, i32 11
  %184 = load double, double* %183
  %185 = getelementptr inbounds %struct.tuple.0, %struct.tuple.0* %103, i32 0, i32 0
  %186 = getelementptr inbounds [8 x i1], [8 x i1]* %185, i64 0, i64 4
  %187 = load i1, i1* %186
  %188 = getelementptr inbounds %struct.tuple.0, %struct.tuple.0* %103, i32 0, i32 12
  %189 = load double, double* %188
  %190 = getelementptr inbounds %struct.tuple.0, %struct.tuple.0* %103, i32 0, i32 0
  %191 = getelementptr inbounds [8 x i1], [8 x i1]* %190, i64 0, i64 5
  %192 = load i1, i1* %191
  %193 = getelementptr inbounds %struct.tuple.0, %struct.tuple.0* %103, i32 0, i32 13
  %194 = load double, double* %193
  %195 = getelementptr inbounds %struct.tuple.0, %struct.tuple.0* %103, i32 0, i32 0
  %196 = getelementptr inbounds [8 x i1], [8 x i1]* %195, i64 0, i64 6
  %197 = load i1, i1* %196
  %198 = getelementptr inbounds %struct.tuple.0, %struct.tuple.0* %103, i32 0, i32 14
  %199 = load double, double* %198
  %200 = getelementptr inbounds %struct.tuple.0, %struct.tuple.0* %103, i32 0, i32 0
  %201 = getelementptr inbounds [8 x i1], [8 x i1]* %200, i64 0, i64 7
  %202 = load i1, i1* %201
  %203 = getelementptr inbounds %struct.tuple.0, %struct.tuple.0* %103, i32 0, i32 15
  %204 = load double, double* %203
  %205 = mul i64 %161, 2
  %206 = add i64 2, %205
  %207 = add i64 0, %206
  %208 = add i64 %207, 2679
  %209 = call i8* @rtmalloc(i64 %208)
  %210 = call i32 @i64toa_sse2(i64 %150, i8* %209)
  %211 = getelementptr i8, i8* %209, i32 %210
  store i8 44, i8* %211
  %212 = getelementptr i8, i8* %211, i32 1
  %213 = call i32 @i64toa_sse2(i64 %152, i8* %212)
  %214 = getelementptr i8, i8* %212, i32 %213
  store i8 44, i8* %214
  %215 = getelementptr i8, i8* %214, i32 1
  %216 = call i32 @i64toa_sse2(i64 %154, i8* %215)
  %217 = getelementptr i8, i8* %215, i32 %216
  store i8 44, i8* %217
  %218 = getelementptr i8, i8* %217, i32 1
  %219 = icmp eq i1 %157, true
  br i1 %219, label %"cell(3)_null", label %"cell(3)_notnull"

"cell(3)_null":                                   ; preds = %normal
  br label %"cell(3)_done"

"cell(3)_notnull":                                ; preds = %normal
  %220 = call i8* @quoteForCSV(i8* %159, i64 %161, i64* %quoted_str_size, i8 44, i8 34)
  %221 = load i64, i64* %quoted_str_size
  %222 = sub i64 %221, 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %218, i8* %220, i64 %222, i1 false)
  %223 = getelementptr i8, i8* %218, i64 %222
  br label %"cell(3)_done"

"cell(3)_done":                                   ; preds = %"cell(3)_notnull", %"cell(3)_null"
  %224 = phi i8* [ %218, %"cell(3)_null" ], [ %223, %"cell(3)_notnull" ]
  store i8 44, i8* %224
  %225 = getelementptr i8, i8* %224, i32 1
  %226 = call i32 @i64toa_sse2(i64 %163, i8* %225)
  %227 = getelementptr i8, i8* %225, i32 %226
  store i8 44, i8* %227
  %228 = getelementptr i8, i8* %227, i32 1
  %229 = call i32 @i64toa_sse2(i64 %165, i8* %228)
  %230 = getelementptr i8, i8* %228, i32 %229
  store i8 44, i8* %230
  %231 = getelementptr i8, i8* %230, i32 1
  %232 = call i32 @i64toa_sse2(i64 %167, i8* %231)
  %233 = getelementptr i8, i8* %231, i32 %232
  store i8 44, i8* %233
  %234 = getelementptr i8, i8* %233, i32 1
  %235 = call i32 @d2fixed_buffered_n(double %169, i32 8, i8* %234)
  %236 = getelementptr i8, i8* %234, i32 %235
  store i8 44, i8* %236
  %237 = getelementptr i8, i8* %236, i32 1
  %238 = icmp eq i1 %172, true
  br i1 %238, label %"cell(8)_null", label %"cell(8)_notnull"

"cell(8)_null":                                   ; preds = %"cell(3)_done"
  br label %"cell(8)_done"

"cell(8)_notnull":                                ; preds = %"cell(3)_done"
  %239 = call i32 @d2fixed_buffered_n(double %174, i32 8, i8* %237)
  %240 = getelementptr i8, i8* %237, i32 %239
  br label %"cell(8)_done"

"cell(8)_done":                                   ; preds = %"cell(8)_notnull", %"cell(8)_null"
  %241 = phi i8* [ %237, %"cell(8)_null" ], [ %240, %"cell(8)_notnull" ]
  store i8 44, i8* %241
  %242 = getelementptr i8, i8* %241, i32 1
  %243 = icmp eq i1 %177, true
  br i1 %243, label %"cell(9)_null", label %"cell(9)_notnull"

"cell(9)_null":                                   ; preds = %"cell(8)_done"
  br label %"cell(9)_done"

"cell(9)_notnull":                                ; preds = %"cell(8)_done"
  %244 = call i32 @d2fixed_buffered_n(double %179, i32 8, i8* %242)
  %245 = getelementptr i8, i8* %242, i32 %244
  br label %"cell(9)_done"

"cell(9)_done":                                   ; preds = %"cell(9)_notnull", %"cell(9)_null"
  %246 = phi i8* [ %242, %"cell(9)_null" ], [ %245, %"cell(9)_notnull" ]
  store i8 44, i8* %246
  %247 = getelementptr i8, i8* %246, i32 1
  %248 = icmp eq i1 %182, true
  br i1 %248, label %"cell(10)_null", label %"cell(10)_notnull"

"cell(10)_null":                                  ; preds = %"cell(9)_done"
  br label %"cell(10)_done"

"cell(10)_notnull":                               ; preds = %"cell(9)_done"
  %249 = call i32 @d2fixed_buffered_n(double %184, i32 8, i8* %247)
  %250 = getelementptr i8, i8* %247, i32 %249
  br label %"cell(10)_done"

"cell(10)_done":                                  ; preds = %"cell(10)_notnull", %"cell(10)_null"
  %251 = phi i8* [ %247, %"cell(10)_null" ], [ %250, %"cell(10)_notnull" ]
  store i8 44, i8* %251
  %252 = getelementptr i8, i8* %251, i32 1
  %253 = icmp eq i1 %187, true
  br i1 %253, label %"cell(11)_null", label %"cell(11)_notnull"

"cell(11)_null":                                  ; preds = %"cell(10)_done"
  br label %"cell(11)_done"

"cell(11)_notnull":                               ; preds = %"cell(10)_done"
  %254 = call i32 @d2fixed_buffered_n(double %189, i32 8, i8* %252)
  %255 = getelementptr i8, i8* %252, i32 %254
  br label %"cell(11)_done"

"cell(11)_done":                                  ; preds = %"cell(11)_notnull", %"cell(11)_null"
  %256 = phi i8* [ %252, %"cell(11)_null" ], [ %255, %"cell(11)_notnull" ]
  store i8 44, i8* %256
  %257 = getelementptr i8, i8* %256, i32 1
  %258 = icmp eq i1 %192, true
  br i1 %258, label %"cell(12)_null", label %"cell(12)_notnull"

"cell(12)_null":                                  ; preds = %"cell(11)_done"
  br label %"cell(12)_done"

"cell(12)_notnull":                               ; preds = %"cell(11)_done"
  %259 = call i32 @d2fixed_buffered_n(double %194, i32 8, i8* %257)
  %260 = getelementptr i8, i8* %257, i32 %259
  br label %"cell(12)_done"

"cell(12)_done":                                  ; preds = %"cell(12)_notnull", %"cell(12)_null"
  %261 = phi i8* [ %257, %"cell(12)_null" ], [ %260, %"cell(12)_notnull" ]
  store i8 44, i8* %261
  %262 = getelementptr i8, i8* %261, i32 1
  %263 = icmp eq i1 %197, true
  br i1 %263, label %"cell(13)_null", label %"cell(13)_notnull"

"cell(13)_null":                                  ; preds = %"cell(12)_done"
  br label %"cell(13)_done"

"cell(13)_notnull":                               ; preds = %"cell(12)_done"
  %264 = call i32 @d2fixed_buffered_n(double %199, i32 8, i8* %262)
  %265 = getelementptr i8, i8* %262, i32 %264
  br label %"cell(13)_done"

"cell(13)_done":                                  ; preds = %"cell(13)_notnull", %"cell(13)_null"
  %266 = phi i8* [ %262, %"cell(13)_null" ], [ %265, %"cell(13)_notnull" ]
  store i8 44, i8* %266
  %267 = getelementptr i8, i8* %266, i32 1
  %268 = icmp eq i1 %202, true
  br i1 %268, label %"cell(14)_null", label %"cell(14)_notnull"

"cell(14)_null":                                  ; preds = %"cell(13)_done"
  br label %"cell(14)_done"

"cell(14)_notnull":                               ; preds = %"cell(13)_done"
  %269 = call i32 @d2fixed_buffered_n(double %204, i32 8, i8* %267)
  %270 = getelementptr i8, i8* %267, i32 %269
  br label %"cell(14)_done"

"cell(14)_done":                                  ; preds = %"cell(14)_notnull", %"cell(14)_null"
  %271 = phi i8* [ %267, %"cell(14)_null" ], [ %270, %"cell(14)_notnull" ]
  store i8 10, i8* %271
  %272 = getelementptr i8, i8* %271, i32 1
  %273 = ptrtoint i8* %209 to i64
  %274 = ptrtoint i8* %272 to i64
  %275 = sub i64 %274, %273
  %276 = call i64 @fast_memOut_Stage_0(i8* %1, i8* %209, i64 %275)
  store i64 1, i64* %numOutputRows
  br label %destructors
}

; Function Attrs: inlinehint norecurse
define internal i64 @fill_in_delays(%struct.tuple.0* %outRow, %struct.tuple.1* byval %inRow) #0 {
body:
  %0 = alloca %struct.tuple.0
  %1 = alloca %struct.tuple.6
  %2 = alloca %struct.tuple.0
  %3 = alloca %struct.tuple.5
  %carrier_delay_size47 = alloca i64
  %carrier_delay46 = alloca double
  %4 = alloca %struct.tuple.0
  %5 = alloca %struct.tuple.4
  %6 = alloca %struct.tuple.0
  %7 = alloca %struct.tuple.3
  %8 = alloca %struct.tuple.0
  %9 = alloca %struct.tuple.2
  %year_size = alloca i64
  %year = alloca i64
  %year_defined = alloca i1
  %weather_delay_size = alloca i64
  %weather_delay = alloca double
  %weather_delay_defined = alloca i1
  %security_delay_size = alloca i64
  %security_delay = alloca double
  %security_delay_defined = alloca i1
  %nas_delay_size = alloca i64
  %nas_delay = alloca double
  %nas_delay_defined = alloca i1
  %month_size = alloca i64
  %month = alloca i64
  %month_defined = alloca i1
  %late_aircraft_delay_size = alloca i64
  %late_aircraft_delay = alloca double
  %late_aircraft_delay_defined = alloca i1
  %crs_elapsed_time_size = alloca i64
  %crs_elapsed_time = alloca double
  %crs_elapsed_time_defined = alloca i1
  %crs_dep_time_size = alloca i64
  %crs_dep_time = alloca double
  %crs_dep_time_defined = alloca i1
  %crs_arr_time_size = alloca i64
  %crs_arr_time = alloca double
  %crs_arr_time_defined = alloca i1
  %10 = alloca i1
  %carrier_delay_size = alloca i64
  %carrier_delay = alloca double
  %carrier_delay_defined = alloca i1
  %11 = alloca i1
  %arr_delay_size = alloca i64
  %arr_delay = alloca double
  %arr_delay_defined = alloca i1
  %row_size = alloca i64
  %row = alloca %struct.tuple.1
  %row_defined = alloca i1
  %12 = getelementptr inbounds %struct.tuple.1, %struct.tuple.1* %inRow, i32 0, i32 1
  %13 = load i64, i64* %12
  %14 = getelementptr inbounds %struct.tuple.1, %struct.tuple.1* %inRow, i32 0, i32 2
  %15 = load i64, i64* %14
  %16 = getelementptr inbounds %struct.tuple.1, %struct.tuple.1* %inRow, i32 0, i32 3
  %17 = load i64, i64* %16
  %18 = getelementptr inbounds %struct.tuple.1, %struct.tuple.1* %inRow, i32 0, i32 0
  %19 = getelementptr inbounds [9 x i1], [9 x i1]* %18, i64 0, i64 0
  %20 = load i1, i1* %19
  %21 = getelementptr inbounds %struct.tuple.1, %struct.tuple.1* %inRow, i32 0, i32 4
  %22 = load i8*, i8** %21
  %23 = getelementptr inbounds %struct.tuple.1, %struct.tuple.1* %inRow, i32 0, i32 19
  %24 = load i64, i64* %23
  %25 = getelementptr inbounds %struct.tuple.1, %struct.tuple.1* %inRow, i32 0, i32 5
  %26 = load i64, i64* %25
  %27 = getelementptr inbounds %struct.tuple.1, %struct.tuple.1* %inRow, i32 0, i32 6
  %28 = load i64, i64* %27
  %29 = getelementptr inbounds %struct.tuple.1, %struct.tuple.1* %inRow, i32 0, i32 7
  %30 = load i64, i64* %29
  %31 = getelementptr inbounds %struct.tuple.1, %struct.tuple.1* %inRow, i32 0, i32 0
  %32 = getelementptr inbounds [9 x i1], [9 x i1]* %31, i64 0, i64 1
  %33 = load i1, i1* %32
  %34 = getelementptr inbounds %struct.tuple.1, %struct.tuple.1* %inRow, i32 0, i32 8
  %35 = load i64, i64* %34
  %36 = getelementptr inbounds %struct.tuple.1, %struct.tuple.1* %inRow, i32 0, i32 0
  %37 = getelementptr inbounds [9 x i1], [9 x i1]* %36, i64 0, i64 2
  %38 = load i1, i1* %37
  %39 = getelementptr inbounds %struct.tuple.1, %struct.tuple.1* %inRow, i32 0, i32 9
  %40 = load double, double* %39
  %41 = getelementptr inbounds %struct.tuple.1, %struct.tuple.1* %inRow, i32 0, i32 10
  %42 = load i64, i64* %41
  %43 = getelementptr inbounds %struct.tuple.1, %struct.tuple.1* %inRow, i32 0, i32 0
  %44 = getelementptr inbounds [9 x i1], [9 x i1]* %43, i64 0, i64 3
  %45 = load i1, i1* %44
  %46 = getelementptr inbounds %struct.tuple.1, %struct.tuple.1* %inRow, i32 0, i32 11
  %47 = load double, double* %46
  %48 = getelementptr inbounds %struct.tuple.1, %struct.tuple.1* %inRow, i32 0, i32 12
  %49 = load double, double* %48
  %50 = getelementptr inbounds %struct.tuple.1, %struct.tuple.1* %inRow, i32 0, i32 13
  %51 = load double, double* %50
  %52 = getelementptr inbounds %struct.tuple.1, %struct.tuple.1* %inRow, i32 0, i32 0
  %53 = getelementptr inbounds [9 x i1], [9 x i1]* %52, i64 0, i64 4
  %54 = load i1, i1* %53
  %55 = getelementptr inbounds %struct.tuple.1, %struct.tuple.1* %inRow, i32 0, i32 14
  %56 = load i8*, i8** %55
  %57 = getelementptr inbounds %struct.tuple.1, %struct.tuple.1* %inRow, i32 0, i32 20
  %58 = load i64, i64* %57
  %59 = getelementptr inbounds %struct.tuple.1, %struct.tuple.1* %inRow, i32 0, i32 0
  %60 = getelementptr inbounds [9 x i1], [9 x i1]* %59, i64 0, i64 5
  %61 = load i1, i1* %60
  %62 = getelementptr inbounds %struct.tuple.1, %struct.tuple.1* %inRow, i32 0, i32 15
  %63 = load i8*, i8** %62
  %64 = getelementptr inbounds %struct.tuple.1, %struct.tuple.1* %inRow, i32 0, i32 21
  %65 = load i64, i64* %64
  %66 = getelementptr inbounds %struct.tuple.1, %struct.tuple.1* %inRow, i32 0, i32 0
  %67 = getelementptr inbounds [9 x i1], [9 x i1]* %66, i64 0, i64 6
  %68 = load i1, i1* %67
  %69 = getelementptr inbounds %struct.tuple.1, %struct.tuple.1* %inRow, i32 0, i32 16
  %70 = load i8*, i8** %69
  %71 = getelementptr inbounds %struct.tuple.1, %struct.tuple.1* %inRow, i32 0, i32 22
  %72 = load i64, i64* %71
  %73 = getelementptr inbounds %struct.tuple.1, %struct.tuple.1* %inRow, i32 0, i32 0
  %74 = getelementptr inbounds [9 x i1], [9 x i1]* %73, i64 0, i64 7
  %75 = load i1, i1* %74
  %76 = getelementptr inbounds %struct.tuple.1, %struct.tuple.1* %inRow, i32 0, i32 17
  %77 = load i8*, i8** %76
  %78 = getelementptr inbounds %struct.tuple.1, %struct.tuple.1* %inRow, i32 0, i32 23
  %79 = load i64, i64* %78
  %80 = getelementptr inbounds %struct.tuple.1, %struct.tuple.1* %inRow, i32 0, i32 0
  %81 = getelementptr inbounds [9 x i1], [9 x i1]* %80, i64 0, i64 8
  %82 = load i1, i1* %81
  %83 = getelementptr inbounds %struct.tuple.1, %struct.tuple.1* %inRow, i32 0, i32 18
  %84 = load i8*, i8** %83
  %85 = getelementptr inbounds %struct.tuple.1, %struct.tuple.1* %inRow, i32 0, i32 24
  %86 = load i64, i64* %85
  store i1 true, i1* %row_defined
  %87 = load %struct.tuple.1, %struct.tuple.1* %inRow
  store %struct.tuple.1 %87, %struct.tuple.1* %row
  store i1 false, i1* %arr_delay_defined
  store i1 false, i1* %carrier_delay_defined
  store i1 false, i1* %crs_arr_time_defined
  store i1 false, i1* %crs_dep_time_defined
  store i1 false, i1* %crs_elapsed_time_defined
  store i1 false, i1* %late_aircraft_delay_defined
  store i1 false, i1* %month_defined
  store i1 false, i1* %nas_delay_defined
  store i1 false, i1* %security_delay_defined
  store i1 false, i1* %weather_delay_defined
  store i1 false, i1* %year_defined
  %88 = load i64, i64* %row_size
  %89 = load %struct.tuple.1, %struct.tuple.1* %row
  %90 = extractvalue %struct.tuple.1 %89, 1
  %91 = extractvalue %struct.tuple.1 %89, 2
  %92 = extractvalue %struct.tuple.1 %89, 3
  %93 = extractvalue %struct.tuple.1 %89, 0
  %94 = extractvalue [9 x i1] %93, 0
  %95 = extractvalue %struct.tuple.1 %89, 4
  %96 = extractvalue %struct.tuple.1 %89, 19
  %97 = extractvalue %struct.tuple.1 %89, 5
  %98 = extractvalue %struct.tuple.1 %89, 6
  %99 = extractvalue %struct.tuple.1 %89, 7
  %100 = extractvalue %struct.tuple.1 %89, 0
  %101 = extractvalue [9 x i1] %100, 1
  %102 = extractvalue %struct.tuple.1 %89, 8
  %103 = extractvalue %struct.tuple.1 %89, 0
  %104 = extractvalue [9 x i1] %103, 2
  %105 = extractvalue %struct.tuple.1 %89, 9
  %106 = extractvalue %struct.tuple.1 %89, 10
  %107 = extractvalue %struct.tuple.1 %89, 0
  %108 = extractvalue [9 x i1] %107, 3
  %109 = extractvalue %struct.tuple.1 %89, 11
  %110 = extractvalue %struct.tuple.1 %89, 12
  %111 = extractvalue %struct.tuple.1 %89, 13
  %112 = extractvalue %struct.tuple.1 %89, 0
  %113 = extractvalue [9 x i1] %112, 4
  %114 = extractvalue %struct.tuple.1 %89, 14
  %115 = extractvalue %struct.tuple.1 %89, 20
  %116 = extractvalue %struct.tuple.1 %89, 0
  %117 = extractvalue [9 x i1] %116, 5
  %118 = extractvalue %struct.tuple.1 %89, 15
  %119 = extractvalue %struct.tuple.1 %89, 21
  %120 = extractvalue %struct.tuple.1 %89, 0
  %121 = extractvalue [9 x i1] %120, 6
  %122 = extractvalue %struct.tuple.1 %89, 16
  %123 = extractvalue %struct.tuple.1 %89, 22
  %124 = extractvalue %struct.tuple.1 %89, 0
  %125 = extractvalue [9 x i1] %124, 7
  %126 = extractvalue %struct.tuple.1 %89, 17
  %127 = extractvalue %struct.tuple.1 %89, 23
  %128 = extractvalue %struct.tuple.1 %89, 0
  %129 = extractvalue [9 x i1] %128, 8
  %130 = extractvalue %struct.tuple.1 %89, 18
  %131 = extractvalue %struct.tuple.1 %89, 24
  store i1 true, i1* %year_defined
  store i64 %90, i64* %year
  store i64 8, i64* %year_size
  %132 = load i64, i64* %row_size
  %133 = load %struct.tuple.1, %struct.tuple.1* %row
  %134 = extractvalue %struct.tuple.1 %133, 1
  %135 = extractvalue %struct.tuple.1 %133, 2
  %136 = extractvalue %struct.tuple.1 %133, 3
  %137 = extractvalue %struct.tuple.1 %133, 0
  %138 = extractvalue [9 x i1] %137, 0
  %139 = extractvalue %struct.tuple.1 %133, 4
  %140 = extractvalue %struct.tuple.1 %133, 19
  %141 = extractvalue %struct.tuple.1 %133, 5
  %142 = extractvalue %struct.tuple.1 %133, 6
  %143 = extractvalue %struct.tuple.1 %133, 7
  %144 = extractvalue %struct.tuple.1 %133, 0
  %145 = extractvalue [9 x i1] %144, 1
  %146 = extractvalue %struct.tuple.1 %133, 8
  %147 = extractvalue %struct.tuple.1 %133, 0
  %148 = extractvalue [9 x i1] %147, 2
  %149 = extractvalue %struct.tuple.1 %133, 9
  %150 = extractvalue %struct.tuple.1 %133, 10
  %151 = extractvalue %struct.tuple.1 %133, 0
  %152 = extractvalue [9 x i1] %151, 3
  %153 = extractvalue %struct.tuple.1 %133, 11
  %154 = extractvalue %struct.tuple.1 %133, 12
  %155 = extractvalue %struct.tuple.1 %133, 13
  %156 = extractvalue %struct.tuple.1 %133, 0
  %157 = extractvalue [9 x i1] %156, 4
  %158 = extractvalue %struct.tuple.1 %133, 14
  %159 = extractvalue %struct.tuple.1 %133, 20
  %160 = extractvalue %struct.tuple.1 %133, 0
  %161 = extractvalue [9 x i1] %160, 5
  %162 = extractvalue %struct.tuple.1 %133, 15
  %163 = extractvalue %struct.tuple.1 %133, 21
  %164 = extractvalue %struct.tuple.1 %133, 0
  %165 = extractvalue [9 x i1] %164, 6
  %166 = extractvalue %struct.tuple.1 %133, 16
  %167 = extractvalue %struct.tuple.1 %133, 22
  %168 = extractvalue %struct.tuple.1 %133, 0
  %169 = extractvalue [9 x i1] %168, 7
  %170 = extractvalue %struct.tuple.1 %133, 17
  %171 = extractvalue %struct.tuple.1 %133, 23
  %172 = extractvalue %struct.tuple.1 %133, 0
  %173 = extractvalue [9 x i1] %172, 8
  %174 = extractvalue %struct.tuple.1 %133, 18
  %175 = extractvalue %struct.tuple.1 %133, 24
  store i1 true, i1* %month_defined
  store i64 %135, i64* %month
  store i64 8, i64* %month_size
  %176 = load i64, i64* %row_size
  %177 = load %struct.tuple.1, %struct.tuple.1* %row
  %178 = extractvalue %struct.tuple.1 %177, 1
  %179 = extractvalue %struct.tuple.1 %177, 2
  %180 = extractvalue %struct.tuple.1 %177, 3
  %181 = extractvalue %struct.tuple.1 %177, 0
  %182 = extractvalue [9 x i1] %181, 0
  %183 = extractvalue %struct.tuple.1 %177, 4
  %184 = extractvalue %struct.tuple.1 %177, 19
  %185 = extractvalue %struct.tuple.1 %177, 5
  %186 = extractvalue %struct.tuple.1 %177, 6
  %187 = extractvalue %struct.tuple.1 %177, 7
  %188 = extractvalue %struct.tuple.1 %177, 0
  %189 = extractvalue [9 x i1] %188, 1
  %190 = extractvalue %struct.tuple.1 %177, 8
  %191 = extractvalue %struct.tuple.1 %177, 0
  %192 = extractvalue [9 x i1] %191, 2
  %193 = extractvalue %struct.tuple.1 %177, 9
  %194 = extractvalue %struct.tuple.1 %177, 10
  %195 = extractvalue %struct.tuple.1 %177, 0
  %196 = extractvalue [9 x i1] %195, 3
  %197 = extractvalue %struct.tuple.1 %177, 11
  %198 = extractvalue %struct.tuple.1 %177, 12
  %199 = extractvalue %struct.tuple.1 %177, 13
  %200 = extractvalue %struct.tuple.1 %177, 0
  %201 = extractvalue [9 x i1] %200, 4
  %202 = extractvalue %struct.tuple.1 %177, 14
  %203 = extractvalue %struct.tuple.1 %177, 20
  %204 = extractvalue %struct.tuple.1 %177, 0
  %205 = extractvalue [9 x i1] %204, 5
  %206 = extractvalue %struct.tuple.1 %177, 15
  %207 = extractvalue %struct.tuple.1 %177, 21
  %208 = extractvalue %struct.tuple.1 %177, 0
  %209 = extractvalue [9 x i1] %208, 6
  %210 = extractvalue %struct.tuple.1 %177, 16
  %211 = extractvalue %struct.tuple.1 %177, 22
  %212 = extractvalue %struct.tuple.1 %177, 0
  %213 = extractvalue [9 x i1] %212, 7
  %214 = extractvalue %struct.tuple.1 %177, 17
  %215 = extractvalue %struct.tuple.1 %177, 23
  %216 = extractvalue %struct.tuple.1 %177, 0
  %217 = extractvalue [9 x i1] %216, 8
  %218 = extractvalue %struct.tuple.1 %177, 18
  %219 = extractvalue %struct.tuple.1 %177, 24
  store i1 true, i1* %arr_delay_defined
  store double %197, double* %arr_delay
  store i64 8, i64* %arr_delay_size
  store i1 %196, i1* %11
  %220 = load i1, i1* %year_defined
  %221 = sub i1 true, %220
  br i1 %221, label %except, label %next

next:                                             ; preds = %body
  %222 = load i64, i64* %year_size
  %223 = load i64, i64* %year
  %224 = icmp eq i64 %223, 2003
  %225 = zext i1 %224 to i8
  %226 = trunc i8 %225 to i1
  %227 = alloca i8
  %228 = alloca i64
  %229 = alloca i1
  store i1 false, i1* %229
  store i64 0, i64* %228
  br i1 %226, label %if, label %else

except:                                           ; preds = %body
  ret i64 130

if:                                               ; preds = %next
  %230 = load i1, i1* %month_defined
  %231 = sub i1 true, %230
  br i1 %231, label %except2, label %next1

else:                                             ; preds = %next
  store i8 0, i8* %227
  store i1 false, i1* %229
  br label %ifelse_exit

ifelse_exit:                                      ; preds = %else, %next1
  %232 = load i1, i1* %229
  %233 = load i64, i64* %228
  %234 = load i8, i8* %227
  %235 = trunc i8 %234 to i1
  %236 = alloca i8
  %237 = alloca i64
  %238 = alloca i1
  store i1 false, i1* %238
  store i64 0, i64* %237
  br i1 %235, label %if3, label %else4

next1:                                            ; preds = %if
  %239 = load i64, i64* %month_size
  %240 = load i64, i64* %month
  %241 = icmp slt i64 %240, 6
  %242 = zext i1 %241 to i8
  %243 = trunc i8 %242 to i1
  %244 = zext i1 %243 to i8
  store i8 %244, i8* %227
  store i1 false, i1* %229
  br label %ifelse_exit

except2:                                          ; preds = %if
  ret i64 130

if3:                                              ; preds = %ifelse_exit
  store i8 1, i8* %236
  store i1 false, i1* %238
  br label %ifelse_exit5

else4:                                            ; preds = %ifelse_exit
  %245 = load i1, i1* %year_defined
  %246 = sub i1 true, %245
  br i1 %246, label %except7, label %next6

ifelse_exit5:                                     ; preds = %next6, %if3
  %247 = load i1, i1* %238
  %248 = load i64, i64* %237
  %249 = load i8, i8* %236
  %250 = load i1, i1* %year_defined
  %251 = load i64, i64* %year_size
  %252 = load i64, i64* %year
  %253 = load i1, i1* %security_delay_defined
  %254 = load i64, i64* %security_delay_size
  %255 = load double, double* %security_delay
  %256 = load i1, i1* %nas_delay_defined
  %257 = load i64, i64* %nas_delay_size
  %258 = load double, double* %nas_delay
  %259 = load i1, i1* %arr_delay_defined
  %260 = load i1, i1* %11
  %261 = load i64, i64* %arr_delay_size
  %262 = load double, double* %arr_delay
  %263 = load i64, i64* %row_size
  %264 = load %struct.tuple.1, %struct.tuple.1* %row
  %265 = load i1, i1* %carrier_delay_defined
  %266 = load i1, i1* %10
  %267 = load i64, i64* %carrier_delay_size
  %268 = load double, double* %carrier_delay
  %269 = load i1, i1* %crs_dep_time_defined
  %270 = load i64, i64* %crs_dep_time_size
  %271 = load double, double* %crs_dep_time
  %272 = load i1, i1* %crs_arr_time_defined
  %273 = load i64, i64* %crs_arr_time_size
  %274 = load double, double* %crs_arr_time
  %275 = load i1, i1* %weather_delay_defined
  %276 = load i64, i64* %weather_delay_size
  %277 = load double, double* %weather_delay
  %278 = load i1, i1* %month_defined
  %279 = load i64, i64* %month_size
  %280 = load i64, i64* %month
  %281 = load i1, i1* %late_aircraft_delay_defined
  %282 = load i64, i64* %late_aircraft_delay_size
  %283 = load double, double* %late_aircraft_delay
  %284 = load i1, i1* %crs_elapsed_time_defined
  %285 = load i64, i64* %crs_elapsed_time_size
  %286 = load double, double* %crs_elapsed_time
  %287 = trunc i8 %249 to i1
  br i1 %287, label %If, label %Else

next6:                                            ; preds = %else4
  %288 = load i64, i64* %year_size
  %289 = load i64, i64* %year
  %290 = icmp slt i64 %289, 2003
  %291 = zext i1 %290 to i8
  %292 = trunc i8 %291 to i1
  %293 = zext i1 %292 to i8
  store i8 %293, i8* %236
  store i1 false, i1* %238
  br label %ifelse_exit5

except7:                                          ; preds = %else4
  ret i64 130

If:                                               ; preds = %ifelse_exit5
  %294 = load i1, i1* %arr_delay_defined
  %295 = sub i1 true, %294
  br i1 %295, label %except9, label %next8

Else:                                             ; preds = %ifelse_exit5
  store double %286, double* %crs_elapsed_time
  store i64 %285, i64* %crs_elapsed_time_size
  store double %283, double* %late_aircraft_delay
  store i64 %282, i64* %late_aircraft_delay_size
  store i64 %280, i64* %month
  store i64 %279, i64* %month_size
  store double %277, double* %weather_delay
  store i64 %276, i64* %weather_delay_size
  store double %274, double* %crs_arr_time
  store i64 %273, i64* %crs_arr_time_size
  store double %271, double* %crs_dep_time
  store i64 %270, i64* %crs_dep_time_size
  store double %255, double* %security_delay
  store i64 %254, i64* %security_delay_size
  store i64 %252, i64* %year
  store i64 %251, i64* %year_size
  store double %258, double* %nas_delay
  store i64 %257, i64* %nas_delay_size
  store double %262, double* %arr_delay
  store i64 %261, i64* %arr_delay_size
  store i1 %260, i1* %11
  store %struct.tuple.1 %264, %struct.tuple.1* %row
  store i64 %263, i64* %row_size
  store double %268, double* %carrier_delay
  store i64 %267, i64* %carrier_delay_size
  store i1 %266, i1* %10
  %296 = load i1, i1* %year_defined
  %297 = sub i1 true, %296
  br i1 %297, label %except81, label %next80

next8:                                            ; preds = %If
  %298 = load i1, i1* %11
  %299 = load i64, i64* %arr_delay_size
  %300 = load double, double* %arr_delay
  %301 = zext i1 %298 to i8
  %302 = load i1, i1* %year_defined
  %303 = load i64, i64* %year_size
  %304 = load i64, i64* %year
  %305 = load i1, i1* %security_delay_defined
  %306 = load i64, i64* %security_delay_size
  %307 = load double, double* %security_delay
  %308 = load i1, i1* %nas_delay_defined
  %309 = load i64, i64* %nas_delay_size
  %310 = load double, double* %nas_delay
  %311 = load i1, i1* %arr_delay_defined
  %312 = load i1, i1* %11
  %313 = load i64, i64* %arr_delay_size
  %314 = load double, double* %arr_delay
  %315 = load i64, i64* %row_size
  %316 = load %struct.tuple.1, %struct.tuple.1* %row
  %317 = load i1, i1* %carrier_delay_defined
  %318 = load i1, i1* %10
  %319 = load i64, i64* %carrier_delay_size
  %320 = load double, double* %carrier_delay
  %321 = load i1, i1* %crs_dep_time_defined
  %322 = load i64, i64* %crs_dep_time_size
  %323 = load double, double* %crs_dep_time
  %324 = load i1, i1* %crs_arr_time_defined
  %325 = load i64, i64* %crs_arr_time_size
  %326 = load double, double* %crs_arr_time
  %327 = load i1, i1* %weather_delay_defined
  %328 = load i64, i64* %weather_delay_size
  %329 = load double, double* %weather_delay
  %330 = load i1, i1* %month_defined
  %331 = load i64, i64* %month_size
  %332 = load i64, i64* %month
  %333 = load i1, i1* %late_aircraft_delay_defined
  %334 = load i64, i64* %late_aircraft_delay_size
  %335 = load double, double* %late_aircraft_delay
  %336 = load i1, i1* %crs_elapsed_time_defined
  %337 = load i64, i64* %crs_elapsed_time_size
  %338 = load double, double* %crs_elapsed_time
  %339 = trunc i8 %301 to i1
  br i1 %339, label %If10, label %Else11

except9:                                          ; preds = %If
  ret i64 130

If10:                                             ; preds = %next8
  %340 = load i1, i1* %year_defined
  %341 = sub i1 true, %340
  br i1 %341, label %except13, label %next12

Else11:                                           ; preds = %next8
  store double %338, double* %crs_elapsed_time
  store i64 %337, i64* %crs_elapsed_time_size
  store double %335, double* %late_aircraft_delay
  store i64 %334, i64* %late_aircraft_delay_size
  store i64 %332, i64* %month
  store i64 %331, i64* %month_size
  store double %329, double* %weather_delay
  store i64 %328, i64* %weather_delay_size
  store double %326, double* %crs_arr_time
  store i64 %325, i64* %crs_arr_time_size
  store double %323, double* %crs_dep_time
  store i64 %322, i64* %crs_dep_time_size
  store double %307, double* %security_delay
  store i64 %306, i64* %security_delay_size
  store i64 %304, i64* %year
  store i64 %303, i64* %year_size
  store double %310, double* %nas_delay
  store i64 %309, i64* %nas_delay_size
  store double %314, double* %arr_delay
  store i64 %313, i64* %arr_delay_size
  store i1 %312, i1* %11
  store %struct.tuple.1 %316, %struct.tuple.1* %row
  store i64 %315, i64* %row_size
  store double %320, double* %carrier_delay
  store i64 %319, i64* %carrier_delay_size
  store i1 %318, i1* %10
  %342 = load i1, i1* %arr_delay_defined
  %343 = sub i1 true, %342
  br i1 %343, label %except17, label %next16

next12:                                           ; preds = %If10
  %344 = load i64, i64* %year_size
  %345 = load i64, i64* %year
  %346 = load i1, i1* %month_defined
  %347 = sub i1 true, %346
  br i1 %347, label %except15, label %next14

except13:                                         ; preds = %If10
  ret i64 130

next14:                                           ; preds = %next12
  %348 = load i64, i64* %month_size
  %349 = load i64, i64* %month
  %350 = load i64, i64* %row_size
  %351 = load %struct.tuple.1, %struct.tuple.1* %row
  %352 = extractvalue %struct.tuple.1 %351, 1
  %353 = extractvalue %struct.tuple.1 %351, 2
  %354 = extractvalue %struct.tuple.1 %351, 3
  %355 = extractvalue %struct.tuple.1 %351, 0
  %356 = extractvalue [9 x i1] %355, 0
  %357 = extractvalue %struct.tuple.1 %351, 4
  %358 = extractvalue %struct.tuple.1 %351, 19
  %359 = extractvalue %struct.tuple.1 %351, 5
  %360 = extractvalue %struct.tuple.1 %351, 6
  %361 = extractvalue %struct.tuple.1 %351, 7
  %362 = extractvalue %struct.tuple.1 %351, 0
  %363 = extractvalue [9 x i1] %362, 1
  %364 = extractvalue %struct.tuple.1 %351, 8
  %365 = extractvalue %struct.tuple.1 %351, 0
  %366 = extractvalue [9 x i1] %365, 2
  %367 = extractvalue %struct.tuple.1 %351, 9
  %368 = extractvalue %struct.tuple.1 %351, 10
  %369 = extractvalue %struct.tuple.1 %351, 0
  %370 = extractvalue [9 x i1] %369, 3
  %371 = extractvalue %struct.tuple.1 %351, 11
  %372 = extractvalue %struct.tuple.1 %351, 12
  %373 = extractvalue %struct.tuple.1 %351, 13
  %374 = extractvalue %struct.tuple.1 %351, 0
  %375 = extractvalue [9 x i1] %374, 4
  %376 = extractvalue %struct.tuple.1 %351, 14
  %377 = extractvalue %struct.tuple.1 %351, 20
  %378 = extractvalue %struct.tuple.1 %351, 0
  %379 = extractvalue [9 x i1] %378, 5
  %380 = extractvalue %struct.tuple.1 %351, 15
  %381 = extractvalue %struct.tuple.1 %351, 21
  %382 = extractvalue %struct.tuple.1 %351, 0
  %383 = extractvalue [9 x i1] %382, 6
  %384 = extractvalue %struct.tuple.1 %351, 16
  %385 = extractvalue %struct.tuple.1 %351, 22
  %386 = extractvalue %struct.tuple.1 %351, 0
  %387 = extractvalue [9 x i1] %386, 7
  %388 = extractvalue %struct.tuple.1 %351, 17
  %389 = extractvalue %struct.tuple.1 %351, 23
  %390 = extractvalue %struct.tuple.1 %351, 0
  %391 = extractvalue [9 x i1] %390, 8
  %392 = extractvalue %struct.tuple.1 %351, 18
  %393 = extractvalue %struct.tuple.1 %351, 24
  %394 = load i64, i64* %row_size
  %395 = load %struct.tuple.1, %struct.tuple.1* %row
  %396 = extractvalue %struct.tuple.1 %395, 1
  %397 = extractvalue %struct.tuple.1 %395, 2
  %398 = extractvalue %struct.tuple.1 %395, 3
  %399 = extractvalue %struct.tuple.1 %395, 0
  %400 = extractvalue [9 x i1] %399, 0
  %401 = extractvalue %struct.tuple.1 %395, 4
  %402 = extractvalue %struct.tuple.1 %395, 19
  %403 = extractvalue %struct.tuple.1 %395, 5
  %404 = extractvalue %struct.tuple.1 %395, 6
  %405 = extractvalue %struct.tuple.1 %395, 7
  %406 = extractvalue %struct.tuple.1 %395, 0
  %407 = extractvalue [9 x i1] %406, 1
  %408 = extractvalue %struct.tuple.1 %395, 8
  %409 = extractvalue %struct.tuple.1 %395, 0
  %410 = extractvalue [9 x i1] %409, 2
  %411 = extractvalue %struct.tuple.1 %395, 9
  %412 = extractvalue %struct.tuple.1 %395, 10
  %413 = extractvalue %struct.tuple.1 %395, 0
  %414 = extractvalue [9 x i1] %413, 3
  %415 = extractvalue %struct.tuple.1 %395, 11
  %416 = extractvalue %struct.tuple.1 %395, 12
  %417 = extractvalue %struct.tuple.1 %395, 13
  %418 = extractvalue %struct.tuple.1 %395, 0
  %419 = extractvalue [9 x i1] %418, 4
  %420 = extractvalue %struct.tuple.1 %395, 14
  %421 = extractvalue %struct.tuple.1 %395, 20
  %422 = extractvalue %struct.tuple.1 %395, 0
  %423 = extractvalue [9 x i1] %422, 5
  %424
[2022-06-06 22:00:42.572] [global] [error] failed to validate pipeline LLVM code
Welcome to

  _____            _
 |_   _|   _ _ __ | | _____  __
   | || | | | '_ \| |/ _ \ \/ /
   | || |_| | |_) | |  __/>  <
   |_| \__,_| .__/|_|\___/_/\_\ 0.3.3rc0
            |_|
    
using Python 3.6.9 (default, Mar 15 2022, 13:55:28) 
[GCC 8.4.0] on linux
>>> running tuplex on s3://tuplex-public/data/flights_all/flights_on_time_performance_2003_*.csv -> s3://tuplex-leonhard/experiments/flights_hyper/general
    hyperspecialization: False
    null-value optimization: False
Tuplex startup time: 0.1912844181060791
Tuplex job time: 2.2938144207000732 s
{'tuplex.useLLVMOptimizer': True, 'tuplex.autoUpcast': False, 'tuplex.allowUndefinedBehavior': False, 'tuplex.optimizer.codeStats': False, 'tuplex.optimizer.generateParser': False, 'tuplex.optimizer.retypeUsingOptimizedInputSchema': False, 'tuplex.optimizer.filterPushdown': True, 'tuplex.optimizer.sharedObjectPropagation': True, 'tuplex.optimizer.mergeExceptionsInOrder': True, 'tuplex.optimizer.operatorReordering': False, 'tuplex.interleaveIO': True, 'tuplex.resolveWithInterpreterOnly': False, 'tuplex.network.verifySSL': False, 'tuplex.redirectToPythonLogging': False, 'tuplex.useInterpreterOnly': False, 'tuplex.aws.lambdaInvokeOthers': True, 'tuplex.csv.selectionPushdown': True, 'tuplex.webui.enable': False, 'tuplex.executorCount': 0, 'tuplex.csv.maxDetectionRows': 10000, 'tuplex.webui.port': 5000, 'tuplex.webui.mongodb.port': 27017, 'tuplex.webui.exceptionDisplayLimit': 5, 'tuplex.aws.requestTimeout': 600, 'tuplex.aws.connectTimeout': 1, 'tuplex.aws.maxConcurrency': 100, 'tuplex.aws.httpThreadCount': 128, 'tuplex.aws.lambdaMemory': 10000, 'tuplex.aws.lambdaTimeout': 600, 'tuplex.aws.requesterPay': False, 'tuplex.normalcaseThreshold': 0.9, 'tuplex.optionalThreshold': 0.7, 'tuplex.aws.lambdaInvocationStrategy': 'direct', 'tuplex.aws.lambdaThreads': '2', 'tuplex.aws.region': 'us-east-1', 'tuplex.aws.scratchDir': 's3://tuplex-leonhard/scratch/flights-exp', 'tuplex.backend': 'lambda', 'tuplex.csv.comments': ['#', '~'], 'tuplex.csv.maxDetectionMemory': '256KB', 'tuplex.csv.quotechar': '"', 'tuplex.csv.separators': [',', ';', '|', '\t'], 'tuplex.driverMemory': '2G', 'tuplex.env.hostname': 'bbsn00', 'tuplex.env.mode': 'file', 'tuplex.env.user': 'lspiegel', 'tuplex.executorMemory': '2G', 'tuplex.experimental.hyperspecialization': 'false', 'tuplex.inputSplitSize': '64MB', 'tuplex.logDir': '.', 'tuplex.network.caFile': '', 'tuplex.network.caPath': '', 'tuplex.optimizer.constantFoldingOptimization': 'false', 'tuplex.optimizer.nullValueOptimization': 'false', 'tuplex.partitionSize': '32MB', 'tuplex.readBufferSize': '128KB', 'tuplex.runTimeLibrary': '/home/lspiegel/tuplex-public/tuplex/build/dist/python/tuplex/libexec/tuplex_runtime.so', 'tuplex.runTimeMemory': '128MB', 'tuplex.runTimeMemoryBlockSize': '4MB', 'tuplex.scratchDir': '/tmp/tuplex-cache-lspiegel', 'tuplex.webui.mongodb.path': '/tmp/tuplex-cache-lspiegel/mongodb', 'tuplex.webui.mongodb.url': 'localhost', 'tuplex.webui.url': 'localhost'}
{"logical_optimization_time_s":0.0223233,"llvm_optimization_time_s":0,"llvm_compilation_time_s":0,"total_compilation_time_s":0,"sampling_time_s":0,"generate_llvm_time_s":0,"stages":[]}
{"startupTime": 0.1912844181060791, "jobTime": 2.2938144207000732}
