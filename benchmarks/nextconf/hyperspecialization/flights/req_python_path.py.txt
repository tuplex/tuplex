import json
import csv
import io
import cloudpickle

# helper row object to allow fancy integer and column based string access within UDFs!
class Row:
    def __init__(self, data, columns=None):
        assert(isinstance(data, (tuple, list)))
        assert(isinstance(columns, (tuple, list)) or columns is None)
        self.data = tuple(data)
        self.columns = tuple(columns[:len(data)]) if columns is not None else None 
        
    def __getitem__(self, key):
        # check for int also works for bool!
        if isinstance(key, int):
            return self.data[key]
        # getitem either gets a key or slice object
        elif isinstance(key, slice):
                   return self.data[key.start:key.stop:key.step]
        elif isinstance(key, str):
            if self.columns is None:
                raise KeyError("no columns defined, can't access column '{}'".format(key))
            elif key not in self.columns:
                raise KeyError("could not find column column '{}'".format(key))
            return self.data[self.columns.index(key)]
        else:
            raise IndexError()
            
    def __repr__(self):
        if self.columns:
            if len(self.columns) < len(self.data):
                self.columns = self.columns + [None] * (len(self.data) - len(self.columns))
            return '(' + ','.join(['{}={}'.format(c, d) for c, d in zip(self.columns, self.data)]) + ')'
        else:
            return '(' + ','.join(['{}'.format(d) for d in self.data]) + ')'
# recursive expansion of Row objects potentially present in data.
def expand_row(x):
    # Note: need to use here type construction, because isinstance fails for dict input when checking for list
    if hasattr(type(x), '__iter__') and not isinstance(x, str):
        if type(x) is tuple:
            return tuple([expand_row(el) for el in x])
        elif type(x) is list:
            return [expand_row(el) for el in x]
        elif type(x) is dict:
            return {expand_row(key) : expand_row(val) for key, val in x.items()}
        else:
            raise TypeError("custom sequence type used, can't convert to data representation")
    return x.data if isinstance(x, Row) else x

def result_to_row(res, columns=None):
    # convert result to row object, i.e. deal with unpacking etc.
    # is result a dict?
    if type(res) is dict:
        # are all keys strings? If so, then unpack!
        # else, keep it as dict return object!
        if all(map(lambda k: type(k) == str, res.keys())):
            # columns become keys, values 
            columns = tuple(res.keys())
            data = tuple(map(lambda k: res[k], columns))
            return Row(data, columns)
    
    
    # is it a row object?
    # => convert to tuple!
    r = expand_row(res)
    
    if type(r) is not tuple:
        r = (r,)
    else:
        if len(r) == 0:
            r = ((),) # special case, empty tuple
    
    return Row(r, columns)

def apply_func(f, row):
    if len(row.data) != 1:
        nargs = f.__code__.co_argcount
        if nargs != 1:
            return f(*tuple([row[i] for i in range(nargs)]))
        else:
            return f(row)
    else:
        # unwrap single element tuples.
        return f(row.data[0])

def pipeline_stage_0(input_row, parse_cells=False):
    res = {'outputRows':[]}
    for _ in range(1):
        if not isinstance(input_row, (tuple, list)):
            res['exception'] = TypeError('cell input must be of string type')
            res['exceptionOperatorID'] = 100000
            res['inputRow'] = input_row
        # special conversion function for boolean necessary
        def to_bool(value):
            valid = {'true':True, 't':True, 'yes':True, 'y':True, 'false':False, 'f':False, 'no':False, 'n':False,              }   
        
            if isinstance(value, bool):
                return value
        
            if not isinstance(value, str):
                raise ValueError('invalid literal for boolean. Not a string.')
        
            lower_value = value.lower()
            if lower_value in valid:
                return valid[lower_value]
            else:
                raise ValueError('invalid literal for boolean: "%s"' % value)
        
        def parse(s):
            assert isinstance(s, str)
            # try to parse s as different types
            if s in ['',]:
                return None
            try:
                return to_bool(s.strip())
            except:
                pass
            try:
                return int(s.strip())
            except:
                pass
            try:
                return float(s.strip())
            except:
                pass
            try:
                return json.loads(s.strip())
            except:
                pass
            # return as string, final option remaining...
            return s
        parsed_row = [parse(el) for el in input_row] if parse_cells else list(input_row)
        projected_row = [None] * 110
        projected_row[60] = parsed_row[17]
        projected_row[59] = parsed_row[16]
        projected_row[11] = parsed_row[5]
        projected_row[6] = parsed_row[3]
        projected_row[10] = parsed_row[4]
        projected_row[40] = parsed_row[9]
        projected_row[3] = parsed_row[2]
        projected_row[57] = parsed_row[14]
        projected_row[20] = parsed_row[6]
        projected_row[54] = parsed_row[12]
        projected_row[0] = parsed_row[0]
        projected_row[2] = parsed_row[1]
        projected_row[29] = parsed_row[7]
        projected_row[31] = parsed_row[8]
        projected_row[42] = parsed_row[10]
        projected_row[50] = parsed_row[11]
        projected_row[56] = parsed_row[13]
        projected_row[58] = parsed_row[15]
        parsed_row = projected_row
        row = Row(parsed_row, ['YEAR','','MONTH','DAY_OF_MONTH','','','OP_UNIQUE_CARRIER','','','','OP_CARRIER_FL_NUM','ORIGIN_AIRPORT_ID','','','','','','','','','DEST_AIRPORT_ID','','','','','','','','','CRS_DEP_TIME','','DEP_DELAY','','','','','','','','','CRS_ARR_TIME','','ARR_DELAY','','','','','','','','CRS_ELAPSED_TIME','','','','DISTANCE','','CARRIER_DELAY','WEATHER_DELAY','NAS_DELAY','SECURITY_DELAY','LATE_AIRCRAFT_DELAY','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','',])
        res['outputColumns'] = ['YEAR','','MONTH','DAY_OF_MONTH','','','OP_UNIQUE_CARRIER','','','','OP_CARRIER_FL_NUM','ORIGIN_AIRPORT_ID','','','','','','','','','DEST_AIRPORT_ID','','','','','','','','','CRS_DEP_TIME','','DEP_DELAY','','','','','','','','','CRS_ARR_TIME','','ARR_DELAY','','','','','','','','CRS_ELAPSED_TIME','','','','DISTANCE','','CARRIER_DELAY','WEATHER_DELAY','NAS_DELAY','SECURITY_DELAY','LATE_AIRCRAFT_DELAY','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','',]
        try:
            code = b'\x80\x05\x95\x4b\x07\x00\x00\x00\x00\x00\x00\x8c\x17\x63\x6c\x6f\x75\x64\x70\x69\x63\x6b\x6c\x65\x2e\x63\x6c\x6f\x75\x64\x70\x69\x63\x6b\x6c\x65\x94\x8c\x0d\x5f\x62\x75\x69\x6c\x74\x69\x6e\x5f\x74\x79\x70\x65\x94\x93\x94\x8c\x0a\x4c\x61\x6d\x62\x64\x61\x54\x79\x70\x65\x94\x85\x94\x52\x94\x28\x68\x02\x8c\x08\x43\x6f\x64\x65\x54\x79\x70\x65\x94\x85\x94\x52\x94\x28\x4b\x01\x4b\x00\x4b\x00\x4b\x0c\x4b\x10\x4b\x43\x42\x2a\x02\x00\x00\x7c\x00\x64\x01\x19\x00\x7d\x01\x7c\x00\x64\x02\x19\x00\x7d\x02\x7c\x00\x64\x03\x19\x00\x7d\x03\x7c\x01\x64\x04\x6b\x02\x72\x28\x7c\x02\x64\x05\x6b\x00\x73\x32\x7c\x01\x64\x04\x6b\x00\x90\x01\x72\xce\x7c\x03\x64\x00\x75\x00\x72\x7a\x7c\x01\x7c\x02\x7c\x00\x64\x06\x19\x00\x7c\x00\x64\x07\x19\x00\x7c\x00\x64\x08\x19\x00\x7c\x00\x64\x09\x19\x00\x7c\x00\x64\x0a\x19\x00\x7c\x00\x64\x0b\x19\x00\x7c\x00\x64\x0c\x19\x00\x64\x00\x64\x00\x64\x00\x64\x00\x64\x00\x64\x00\x64\x0d\x9c\x0f\x53\x00\x7c\x03\x64\x0e\x6b\x00\x72\xc6\x7c\x01\x7c\x02\x7c\x00\x64\x06\x19\x00\x7c\x00\x64\x07\x19\x00\x7c\x00\x64\x08\x19\x00\x7c\x00\x64\x09\x19\x00\x7c\x00\x64\x0a\x19\x00\x7c\x00\x64\x0b\x19\x00\x7c\x00\x64\x0c\x19\x00\x7c\x00\x64\x03\x19\x00\x64\x00\x64\x00\x64\x00\x64\x00\x64\x00\x64\x0d\x9c\x0f\x53\x00\x7c\x03\x64\x0f\x6b\x00\x90\x01\x72\x18\x7c\x03\x7d\x04\x7c\x01\x7c\x02\x7c\x00\x64\x06\x19\x00\x7c\x00\x64\x07\x19\x00\x7c\x00\x64\x08\x19\x00\x7c\x00\x64\x09\x19\x00\x7c\x00\x64\x0a\x19\x00\x7c\x00\x64\x0b\x19\x00\x7c\x00\x64\x0c\x19\x00\x7c\x00\x64\x03\x19\x00\x7c\x04\x64\x00\x64\x00\x64\x00\x64\x00\x64\x0d\x9c\x0f\x53\x00\x74\x00\x7c\x00\x64\x10\x19\x00\x83\x01\x7d\x05\x74\x00\x7c\x00\x64\x11\x19\x00\x83\x01\x7d\x06\x74\x00\x7c\x00\x64\x12\x19\x00\x83\x01\x7d\x07\x64\x13\x64\x14\x7c\x05\x14\x00\x17\x00\x64\x15\x7c\x07\x14\x00\x18\x00\x7d\x04\x64\x16\x64\x17\x7c\x04\x14\x00\x7c\x04\x64\x18\x18\x00\x14\x00\x17\x00\x7d\x08\x64\x19\x7c\x05\x14\x00\x64\x18\x1b\x00\x7d\x09\x64\x1a\x7c\x05\x1b\x00\x7d\x0a\x64\x1b\x7c\x06\x17\x00\x64\x1c\x7c\x05\x17\x00\x1b\x00\x7d\x0b\x7c\x01\x7c\x02\x7c\x00\x64\x06\x19\x00\x7c\x00\x64\x07\x19\x00\x7c\x00\x64\x08\x19\x00\x7c\x00\x64\x09\x19\x00\x7c\x00\x64\x0a\x19\x00\x7c\x00\x64\x0b\x19\x00\x7c\x00\x64\x0c\x19\x00\x7c\x00\x64\x03\x19\x00\x7c\x04\x7c\x08\x7c\x09\x7c\x0a\x7c\x0b\x64\x0d\x9c\x0f\x53\x00\x6e\x58\x7c\x01\x7c\x02\x7c\x00\x64\x06\x19\x00\x7c\x00\x64\x07\x19\x00\x7c\x00\x64\x08\x19\x00\x7c\x00\x64\x09\x19\x00\x7c\x00\x64\x0a\x19\x00\x7c\x00\x64\x0b\x19\x00\x7c\x00\x64\x0c\x19\x00\x7c\x00\x64\x03\x19\x00\x7c\x00\x64\x1d\x19\x00\x7c\x00\x64\x1e\x19\x00\x7c\x00\x64\x1f\x19\x00\x7c\x00\x64\x20\x19\x00\x7c\x00\x64\x21\x19\x00\x64\x0d\x9c\x0f\x53\x00\x64\x00\x53\x00\x94\x28\x4e\x8c\x04\x59\x45\x41\x52\x94\x8c\x05\x4d\x4f\x4e\x54\x48\x94\x8c\x09\x41\x52\x52\x5f\x44\x45\x4c\x41\x59\x94\x4d\xd3\x07\x4b\x06\x8c\x0c\x44\x41\x59\x5f\x4f\x46\x5f\x4d\x4f\x4e\x54\x48\x94\x8c\x11\x4f\x50\x5f\x55\x4e\x49\x51\x55\x45\x5f\x43\x41\x52\x52\x49\x45\x52\x94\x8c\x11\x4f\x50\x5f\x43\x41\x52\x52\x49\x45\x52\x5f\x46\x4c\x5f\x4e\x55\x4d\x94\x8c\x11\x4f\x52\x49\x47\x49\x4e\x5f\x41\x49\x52\x50\x4f\x52\x54\x5f\x49\x44\x94\x8c\x0f\x44\x45\x53\x54\x5f\x41\x49\x52\x50\x4f\x52\x54\x5f\x49\x44\x94\x8c\x08\x44\x49\x53\x54\x41\x4e\x43\x45\x94\x8c\x09\x44\x45\x50\x5f\x44\x45\x4c\x41\x59\x94\x28\x8c\x04\x79\x65\x61\x72\x94\x8c\x05\x6d\x6f\x6e\x74\x68\x94\x8c\x03\x64\x61\x79\x94\x8c\x07\x63\x61\x72\x72\x69\x65\x72\x94\x8c\x08\x66\x6c\x69\x67\x68\x74\x6e\x6f\x94\x8c\x06\x6f\x72\x69\x67\x69\x6e\x94\x8c\x04\x64\x65\x73\x74\x94\x8c\x08\x64\x69\x73\x74\x61\x6e\x63\x65\x94\x8c\x09\x64\x65\x70\x5f\x64\x65\x6c\x61\x79\x94\x8c\x09\x61\x72\x72\x5f\x64\x65\x6c\x61\x79\x94\x8c\x0d\x63\x61\x72\x72\x69\x65\x72\x5f\x64\x65\x6c\x61\x79\x94\x8c\x0d\x77\x65\x61\x74\x68\x65\x72\x5f\x64\x65\x6c\x61\x79\x94\x8c\x09\x6e\x61\x73\x5f\x64\x65\x6c\x61\x79\x94\x8c\x0e\x73\x65\x63\x75\x72\x69\x74\x79\x5f\x64\x65\x6c\x61\x79\x94\x8c\x13\x6c\x61\x74\x65\x5f\x61\x69\x72\x63\x72\x61\x66\x74\x5f\x64\x65\x6c\x61\x79\x94\x74\x94\x47\x00\x00\x00\x00\x00\x00\x00\x00\x47\x40\x14\x00\x00\x00\x00\x00\x00\x8c\x0c\x43\x52\x53\x5f\x44\x45\x50\x5f\x54\x49\x4d\x45\x94\x8c\x0c\x43\x52\x53\x5f\x41\x52\x52\x5f\x54\x49\x4d\x45\x94\x8c\x10\x43\x52\x53\x5f\x45\x4c\x41\x50\x53\x45\x44\x5f\x54\x49\x4d\x45\x94\x4d\x00\x04\x47\x40\x05\x99\x99\x99\x99\x99\x9a\x47\x3f\xc9\x99\x99\x99\x99\x99\x9a\x4d\xd0\x07\x47\x3f\xb7\x0a\x3d\x70\xa3\xd7\x0a\x47\x40\x24\x00\x00\x00\x00\x00\x00\x4d\x10\x0e\x4d\x20\x1c\x4b\x14\x47\x3f\xf0\x00\x00\x00\x00\x00\x00\x8c\x0d\x43\x41\x52\x52\x49\x45\x52\x5f\x44\x45\x4c\x41\x59\x94\x8c\x0d\x57\x45\x41\x54\x48\x45\x52\x5f\x44\x45\x4c\x41\x59\x94\x8c\x09\x4e\x41\x53\x5f\x44\x45\x4c\x41\x59\x94\x8c\x0e\x53\x45\x43\x55\x52\x49\x54\x59\x5f\x44\x45\x4c\x41\x59\x94\x8c\x13\x4c\x41\x54\x45\x5f\x41\x49\x52\x43\x52\x41\x46\x54\x5f\x44\x45\x4c\x41\x59\x94\x74\x94\x8c\x05\x66\x6c\x6f\x61\x74\x94\x85\x94\x28\x8c\x03\x72\x6f\x77\x94\x68\x14\x68\x15\x68\x1d\x68\x1e\x8c\x0c\x63\x72\x73\x5f\x64\x65\x70\x5f\x74\x69\x6d\x65\x94\x8c\x0c\x63\x72\x73\x5f\x61\x72\x72\x5f\x74\x69\x6d\x65\x94\x8c\x10\x63\x72\x73\x5f\x65\x6c\x61\x70\x73\x65\x64\x5f\x74\x69\x6d\x65\x94\x68\x1f\x68\x20\x68\x21\x68\x22\x74\x94\x8c\x59\x2f\x68\x6f\x6d\x65\x2f\x6c\x73\x70\x69\x65\x67\x65\x6c\x2f\x74\x75\x70\x6c\x65\x78\x2d\x72\x65\x6d\x6f\x74\x65\x2f\x62\x65\x6e\x63\x68\x6d\x61\x72\x6b\x73\x2f\x6e\x65\x78\x74\x63\x6f\x6e\x66\x2f\x68\x79\x70\x65\x72\x73\x70\x65\x63\x69\x61\x6c\x69\x7a\x61\x74\x69\x6f\x6e\x2f\x66\x6c\x69\x67\x68\x74\x73\x2f\x72\x75\x6e\x74\x75\x70\x6c\x65\x78\x2e\x70\x79\x94\x8c\x0e\x66\x69\x6c\x6c\x5f\x69\x6e\x5f\x64\x65\x6c\x61\x79\x73\x94\x4b\x0d\x43\xb6\x00\x04\x08\x01\x08\x01\x08\x02\x1a\x02\x08\x03\x04\x01\x06\x01\x06\x01\x06\x01\x06\x01\x06\x01\x06\x01\x06\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\xf3\x06\x0e\x08\x03\x04\x01\x06\x01\x06\x01\x06\x01\x06\x01\x06\x01\x06\x01\x06\x01\x06\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\xf3\x06\x0e\x0a\x02\x04\x03\x04\x01\x06\x01\x06\x01\x06\x01\x06\x01\x06\x01\x06\x01\x06\x01\x06\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\xf3\x06\x11\x0c\x01\x0c\x01\x0c\x01\x14\x01\x14\x01\x0c\x01\x08\x01\x10\x01\x04\x01\x06\x01\x06\x01\x06\x01\x06\x01\x06\x01\x06\x01\x06\x01\x06\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\xf3\x08\x10\x04\x01\x06\x01\x06\x01\x06\x01\x06\x01\x06\x01\x06\x01\x06\x01\x06\x01\x06\x01\x06\x01\x06\x01\x06\x01\x06\xf3\x94\x29\x29\x74\x94\x52\x94\x7d\x94\x28\x8c\x0b\x5f\x5f\x70\x61\x63\x6b\x61\x67\x65\x5f\x5f\x94\x4e\x8c\x08\x5f\x5f\x6e\x61\x6d\x65\x5f\x5f\x94\x8c\x08\x5f\x5f\x6d\x61\x69\x6e\x5f\x5f\x94\x8c\x08\x5f\x5f\x66\x69\x6c\x65\x5f\x5f\x94\x68\x34\x75\x4e\x4e\x4e\x74\x94\x52\x94\x8c\x1c\x63\x6c\x6f\x75\x64\x70\x69\x63\x6b\x6c\x65\x2e\x63\x6c\x6f\x75\x64\x70\x69\x63\x6b\x6c\x65\x5f\x66\x61\x73\x74\x94\x8c\x12\x5f\x66\x75\x6e\x63\x74\x69\x6f\x6e\x5f\x73\x65\x74\x73\x74\x61\x74\x65\x94\x93\x94\x68\x3f\x7d\x94\x7d\x94\x28\x68\x3b\x68\x35\x8c\x0c\x5f\x5f\x71\x75\x61\x6c\x6e\x61\x6d\x65\x5f\x5f\x94\x68\x35\x8c\x0f\x5f\x5f\x61\x6e\x6e\x6f\x74\x61\x74\x69\x6f\x6e\x73\x5f\x5f\x94\x7d\x94\x8c\x0e\x5f\x5f\x6b\x77\x64\x65\x66\x61\x75\x6c\x74\x73\x5f\x5f\x94\x4e\x8c\x0c\x5f\x5f\x64\x65\x66\x61\x75\x6c\x74\x73\x5f\x5f\x94\x4e\x8c\x0a\x5f\x5f\x6d\x6f\x64\x75\x6c\x65\x5f\x5f\x94\x68\x3c\x8c\x07\x5f\x5f\x64\x6f\x63\x5f\x5f\x94\x4e\x8c\x0b\x5f\x5f\x63\x6c\x6f\x73\x75\x72\x65\x5f\x5f\x94\x4e\x8c\x17\x5f\x63\x6c\x6f\x75\x64\x70\x69\x63\x6b\x6c\x65\x5f\x73\x75\x62\x6d\x6f\x64\x75\x6c\x65\x73\x94\x5d\x94\x8c\x0b\x5f\x5f\x67\x6c\x6f\x62\x61\x6c\x73\x5f\x5f\x94\x7d\x94\x75\x86\x94\x86\x52\x30\x2e'
            f = cloudpickle.loads(code)
            call_res = apply_func(f, row)
            row = result_to_row(call_res, row.columns)
        except Exception as e:
            res['exception'] = e
            res['exceptionOperatorID'] = 100001
            res['inputRow'] = input_row
        buf = io.StringIO()
        w = csv.writer(buf, delimiter=',', quotechar='"', quoting=csv.QUOTE_MINIMAL, lineterminator='\n')
        w.writerow(row.data)
        csvSerialized = buf.getvalue()
        res['outputRows'] += [csvSerialized]
        res['outputColumns'] = row.columns
    return res

