import lithops
import os
import logging
import time
import json
import csv
import numpy as np
import sys
import pandas
import io
import pandas as pd
import argparse

# helper function with exp falloff as recommended by AWS https://docs.aws.amazon.com/general/latest/gr/api-retries.html
S3_MAX_RETRIES = 5
def put_object_with_retries(storage, output, out_bucket, out_suffix, max_retries=S3_MAX_RETRIES):

    try:
        return storage.put_cloudobject(output, out_bucket, out_suffix)
    except:

        retries = 0
        success = False
        rc = None
        while not success and retries < max_retries:
            time.sleep(0.1 * 2 ** retries)
            try:
                rc = storage.put_cloudobject(output, out_bucket, out_suffix)
                success = True
            except Exception as e:
                print('retry failed with {str(e)}')
            retries += 1
        return rc


# udfs for each flights file
def extract_feature_vector(row):
    carrier_list = [None, 'EA', 'UA', 'PI', 'NK', 'PS', 'AA', 'NW', 'EV', 'B6', 'HP', 'TW', 'DL', 'OO', 'F9', 'YV',
                    'TZ', 'US',
                    'MQ', 'OH', 'HA', 'ML (1)', 'XE', 'G4', 'YX', 'DH', 'AS', 'KH', 'QX', 'CO', 'FL', 'VX', 'PA (1)',
                    'WN', '9E']

    airport_list = [None, 'ABE', 'ABI', 'ABQ', 'ABR', 'ABY', 'ACK', 'ACT', 'ACV', 'ACY', 'ADK', 'ADQ', 'AEX', 'AGS',
                    'AKN',
                    'ALB', 'ALO', 'ALS', 'ALW', 'AMA', 'ANC', 'ANI', 'APF', 'APN', 'ART', 'ASE', 'ATL', 'ATW', 'ATY',
                    'AUS', 'AVL', 'AVP', 'AZA', 'AZO', 'BDL', 'BET', 'BFF', 'BFI', 'BFL', 'BFM', 'BGM', 'BGR', 'BHM',
                    'BIL', 'BIS', 'BJI', 'BKG', 'BLI', 'BLV', 'BMI', 'BNA', 'BOI', 'BOS', 'BPT', 'BQK', 'BQN', 'BRD',
                    'BRO', 'BRW', 'BTM', 'BTR', 'BTV', 'BUF', 'BUR', 'BWI', 'BZN', 'CAE', 'CAK', 'CBM', 'CCR', 'CDB',
                    'CDC', 'CDV', 'CEC', 'CGI', 'CHA', 'CHO', 'CHS', 'CIC', 'CID', 'CIU', 'CKB', 'CLD', 'CLE', 'CLL',
                    'CLT', 'CMH', 'CMI', 'CMX', 'CNY', 'COD', 'COS', 'COU', 'CPR', 'CRP', 'CRW', 'CSG', 'CVG', 'CWA',
                    'CYS', 'DAB', 'DAL', 'DAY', 'DBQ', 'DCA', 'DDC', 'DEC', 'DEN', 'DET', 'DFW', 'DHN', 'DIK', 'DLG',
                    'DLH', 'DRO', 'DRT', 'DSM', 'DTW', 'DUT', 'DVL', 'EAR', 'EAT', 'EAU', 'ECP', 'EFD', 'EGE', 'EKO',
                    'ELM', 'ELP', 'ENV', 'ERI', 'ESC', 'EUG', 'EVV', 'EWN', 'EWR', 'EYW', 'FAI', 'FAR', 'FAT', 'FAY',
                    'FCA', 'FLG', 'FLL', 'FLO', 'FMN', 'FNL', 'FNT', 'FOD', 'FOE', 'FSD', 'FSM', 'FWA', 'GCC', 'GCK',
                    'GCN', 'GEG', 'GFK', 'GGG', 'GJT', 'GLH', 'GNV', 'GPT', 'GRB', 'GRI', 'GRK', 'GRR', 'GSO', 'GSP',
                    'GST', 'GTF', 'GTR', 'GUC', 'GUM', 'HDN', 'HGR', 'HHH', 'HIB', 'HKY', 'HLN', 'HNL', 'HOB', 'HOU',
                    'HPN', 'HRL', 'HSV', 'HTS', 'HVN', 'HYA', 'HYS', 'IAD', 'IAG', 'IAH', 'ICT', 'IDA', 'IFP', 'ILE',
                    'ILG', 'ILM', 'IMT', 'IND', 'INL', 'IPL', 'IPT', 'ISN', 'ISO', 'ISP', 'ITH', 'ITO', 'IYK', 'JAC',
                    'JAN', 'JAX', 'JFK', 'JLN', 'JMS', 'JNU', 'JST', 'KOA', 'KSM', 'KTN', 'LAN', 'LAR', 'LAS', 'LAW',
                    'LAX', 'LBB', 'LBE', 'LBF', 'LBL', 'LCH', 'LCK', 'LEX', 'LFT', 'LGA', 'LGB', 'LIH', 'LIT', 'LMT',
                    'LNK', 'LNY', 'LRD', 'LSE', 'LWB', 'LWS', 'LYH', 'MAF', 'MAZ', 'MBS', 'MCI', 'MCN', 'MCO', 'MCW',
                    'MDT', 'MDW', 'MEI', 'MEM', 'MFE', 'MFR', 'MGM', 'MHK', 'MHT', 'MIA', 'MIB', 'MKC', 'MKE', 'MKG',
                    'MKK', 'MLB', 'MLI', 'MLU', 'MMH', 'MOB', 'MOD', 'MOT', 'MQT', 'MRY', 'MSN', 'MSO', 'MSP', 'MSY',
                    'MTH', 'MTJ', 'MVY', 'MWH', 'MYR', 'OAJ', 'OAK', 'OGD', 'OGG', 'OGS', 'OKC', 'OMA', 'OME', 'ONT',
                    'ORD', 'ORF', 'ORH', 'OTH', 'OTZ', 'OWB', 'OXR', 'PAE', 'PAH', 'PBG', 'PBI', 'PDX', 'PFN', 'PGD',
                    'PGV', 'PHF', 'PHL', 'PHX', 'PIA', 'PIB', 'PIE', 'PIH', 'PIR', 'PIT', 'PLN', 'PMD', 'PNS', 'PPG',
                    'PRC', 'PSC', 'PSE', 'PSG', 'PSM', 'PSP', 'PUB', 'PUW', 'PVD', 'PVU', 'PWM', 'RAP', 'RCA', 'RDD',
                    'RDM', 'RDR', 'RDU', 'RFD', 'RHI', 'RIC', 'RIW', 'RKS', 'RNO', 'ROA', 'ROC', 'ROP', 'ROR', 'ROW',
                    'RST', 'RSW', 'SAF', 'SAN', 'SAT', 'SAV', 'SBA', 'SBN', 'SBP', 'SCC', 'SCE', 'SCK', 'SDF', 'SEA',
                    'SFB', 'SFO', 'SGF', 'SGU', 'SHD', 'SHR', 'SHV', 'SIT', 'SJC', 'SJT', 'SJU', 'SKA', 'SLC', 'SLE',
                    'SLN', 'SMF', 'SMX', 'SNA', 'SOP', 'SPI', 'SPN', 'SPS', 'SRQ', 'STC', 'STL', 'STS', 'STT', 'STX',
                    'SUN', 'SUX', 'SWF', 'SWO', 'SYR', 'TBN', 'TEX', 'TKI', 'TLH', 'TOL', 'TPA', 'TRI', 'TTN', 'TUL',
                    'TUP', 'TUS', 'TVC', 'TVL', 'TWF', 'TXK', 'TYR', 'TYS', 'UCA', 'UIN', 'USA', 'UST', 'UTM', 'VCT',
                    'VEL', 'VIS', 'VLD', 'VPS', 'WRG', 'WYS', 'XNA', 'XWA', 'YAK', 'YAP', 'YKM', 'YNG', 'YUM']

    state_list = [None, 'Alabama', 'Alaska', 'Arizona', 'Arkansas', 'California', 'Colorado', 'Connecticut', 'Delaware',
                  'Florida', 'Georgia', 'Hawaii', 'Idaho', 'Illinois', 'Indiana', 'Iowa', 'Kansas', 'Kentucky',
                  'Louisiana', 'Maine', 'Maryland', 'Massachusetts', 'Michigan', 'Minnesota', 'Mississippi',
                  'Missouri', 'Montana', 'Nebraska', 'Nevada', 'New Hampshire', 'New Jersey', 'New Mexico',
                  'New York', 'North Carolina', 'North Dakota', 'Ohio', 'Oklahoma', 'Oregon', 'Pennsylvania',
                  'Puerto Rico', 'Rhode Island', 'South Carolina', 'South Dakota', 'Tennessee', 'Texas',
                  'U.S. Pacific Trust Territories and Possessions', 'U.S. Virgin Islands', 'Utah', 'Vermont',
                  'Virginia', 'Washington', 'West Virginia', 'Wisconsin', 'Wyoming']

    # invalid -> return 0-based feature vector.
    if row['CRS_ARR_TIME'] is None or row['CRS_DEP_TIME'] is None:
        return [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]

    # categorical variables
    quarter = row['QUARTER']
    month = row['MONTH']
    day_of_month = row['DAY_OF_MONTH']
    day_of_week = row['DAY_OF_WEEK']
    carrier = carrier_list.index(row['OP_UNIQUE_CARRIER'])
    origin_airport = airport_list.index(row['ORIGIN'])
    dest_airport = airport_list.index(row['DEST'])

    origin_state = state_list.index(row['ORIGIN_STATE_NM'])
    dest_state = state_list.index(row['DEST_STATE_NM'])

    # numerical variables
    dep_delay = row['DEP_DELAY']
    arr_delay = row['ARR_DELAY']

    crs_arr_hour = float(int(row['CRS_ARR_TIME']) // 100)
    crs_dep_hour = float(int(row['CRS_DEP_TIME']) // 100)
    crs_arr_5min = float(int(row['CRS_ARR_TIME']) % 100 // 5)
    crs_dep_5min = float(int(row['CRS_DEP_TIME']) % 100 // 5)

    features = [float(quarter), float(month), float(day_of_month),
                float(day_of_week), float(carrier), float(origin_state),
                float(dest_state), dep_delay, arr_delay,
                crs_arr_hour, crs_dep_hour,
                crs_arr_5min, crs_dep_5min]

    return features

def fill_in_delays(row):
    # want to fill in data for missing carrier_delay, weather delay etc.
    # only need to do that prior to 2003/06

    year = row['YEAR']
    month = row['MONTH']
    arr_delay = row['ARR_DELAY']

    if year == 2003 and month < 6 or year < 2003:
        # fill in delay breakdown using model and complex logic
        if arr_delay is None:
            # stays None, because flight arrived early
            # if diverted though, need to add everything to div_arr_delay
            return {'year' : year, 'month' : month,
                    'day' : row['DAY_OF_MONTH'],
                    'carrier': row['OP_UNIQUE_CARRIER'],
                    'flightno' : row['OP_CARRIER_FL_NUM'],
                    'origin': row['ORIGIN_AIRPORT_ID'],
                    'dest': row['DEST_AIRPORT_ID'],
                    'distance' : row['DISTANCE'],
                    'dep_delay' : row['DEP_DELAY'],
                    'arr_delay': None,
                    'carrier_delay' : None,
                    'weather_delay': None,
                    'nas_delay' : None,
                    'security_delay': None,
                    'late_aircraft_delay' : None}
        elif arr_delay < 0.:
            # stays None, because flight arrived early
            # if diverted though, need to add everything to div_arr_delay
            return {'year' : year, 'month' : month,
                    'day' : row['DAY_OF_MONTH'],
                    'carrier': row['OP_UNIQUE_CARRIER'],
                    'flightno' : row['OP_CARRIER_FL_NUM'],
                    'origin': row['ORIGIN_AIRPORT_ID'],
                    'dest': row['DEST_AIRPORT_ID'],
                    'distance' : row['DISTANCE'],
                    'dep_delay' : row['DEP_DELAY'],
                    'arr_delay': row['ARR_DELAY'],
                    'carrier_delay' : None,
                    'weather_delay': None,
                    'nas_delay' : None,
                    'security_delay': None,
                    'late_aircraft_delay' : None}
        elif arr_delay < 5.:
            # it's an ontime flight, just attribute any delay to the carrier
            carrier_delay = arr_delay
            # set the rest to 0
            # ....
            return {'year' : year, 'month' : month,
                    'day' : row['DAY_OF_MONTH'],
                    'carrier': row['OP_UNIQUE_CARRIER'],
                    'flightno' : row['OP_CARRIER_FL_NUM'],
                    'origin': row['ORIGIN_AIRPORT_ID'],
                    'dest': row['DEST_AIRPORT_ID'],
                    'distance' : row['DISTANCE'],
                    'dep_delay' : row['DEP_DELAY'],
                    'arr_delay': row['ARR_DELAY'],
                    'carrier_delay' : carrier_delay,
                    'weather_delay': None,
                    'nas_delay' : None,
                    'security_delay': None,
                    'late_aircraft_delay' : None}
        else:
            # use model to determine everything and set into (join with weather data?)
            # i.e., extract here a couple additional columns & use them for features etc.!

            # use here linear model
            # (for now random numbers, but can easily fit some from the data)
            # features is a list of 13 values.
            f = row['features']
            mu = [ 10.34020663,  -5.32110325, -23.76501655,  -9.9471319 ,
                   11.08306402,  28.44419468,  34.33795322,  -3.5271869 ,
                   14.31617576,  -2.37601258,   3.10218378,  31.74930251,
                   30.65958678]

            std = [ 6.14500234, 15.43086255,  3.95305606,  8.95857769,  5.82440163,
                    10.0310225 ,  8.20700403,  8.16668611,  3.34533295,  9.30209542,
                    7.54420077,  0.17705991, 13.322939  ]
            normalized_f = [(f[0] - mu[0]) / std[0], (f[1] - mu[1]) / std[1], (f[2] - mu[2]) / std[2], (f[3] - mu[3]) / std[3], (f[4] - mu[4]) / std[4], (f[5] - mu[5]) / std[5], (f[6] - mu[6]) / std[6], (f[7] - mu[7]) / std[7], (f[8] - mu[8]) / std[8], (f[9] - mu[9]) / std[9], (f[10] - mu[10]) / std[10], (f[11] - mu[11]) / std[11], (f[12] - mu[12]) / std[12]]

            normalized_t_carrier_delay = normalized_f[0] * 1.12 + normalized_f[1] * 4.49 + normalized_f[2] * 3.42 + normalized_f[3] * 4.28 + normalized_f[4] * 0.81 + normalized_f[5] * 5.13 + normalized_f[6] * 5.26 + normalized_f[7] * -0.07 + normalized_f[8] * -1.39 + normalized_f[9] * 2.74 + normalized_f[10] * -2.93 + normalized_f[11] * 4.81 + normalized_f[12] * 4.36
            t_carrier_delay = normalized_t_carrier_delay * 4.06 + 1.48

            normalized_t_weather_delay = normalized_f[0] * 1.84 + normalized_f[1] * -1.92 + normalized_f[2] * 2.59 + normalized_f[3] * -1.49 + normalized_f[4] * 9.29 + normalized_f[5] * 7.88 + normalized_f[6] * 1.11 + normalized_f[7] * 3.87 + normalized_f[8] * 0.57 + normalized_f[9] * 4.32 + normalized_f[10] * 7.65 + normalized_f[11] * -4.69 + normalized_f[12] * 0.07
            t_weather_delay = normalized_t_weather_delay * -5.07 + 5.95

            normalized_t_nas_delay = normalized_f[0] * -3.33 + normalized_f[1] * 9.12 + normalized_f[2] * 2.64 + normalized_f[3] * 0.05 + normalized_f[4] * 2.51 + normalized_f[5] * -3.30 + normalized_f[6] * -1.44 + normalized_f[7] * -2.38 + normalized_f[8] * 6.60 + normalized_f[9] * 2.86 + normalized_f[10] * 2.74 + normalized_f[11] * 3.00 + normalized_f[12] * 2.61
            t_nas_delay = normalized_t_nas_delay * 5.90 + 5.87

            normalized_t_security_delay = normalized_f[0] * 4.25 + normalized_f[1] * -0.68 + normalized_f[2] * 3.40 + normalized_f[3] * 5.63 + normalized_f[4] * 3.57 + normalized_f[5] * 3.19 + normalized_f[6] * 2.90 + normalized_f[7] * 1.43 + normalized_f[8] * 3.86 + normalized_f[9] * 4.24 + normalized_f[10] * 10.60 + normalized_f[11] * 0.84 + normalized_f[12] * 2.97
            t_security_delay = normalized_t_security_delay * 0.11 + 8.68

            normalized_t_late_aircraft_delay = normalized_f[0] * 2.89 + normalized_f[1] * -1.12 + normalized_f[2] * 1.52 + normalized_f[3] * 3.10 + normalized_f[4] * 4.74 + normalized_f[5] * -0.97 + normalized_f[6] * 1.47 + normalized_f[7] * 8.53 + normalized_f[8] * 0.63 + normalized_f[9] * 6.67 + normalized_f[10] * 4.44 + normalized_f[11] * 3.12 + normalized_f[12] * 2.92
            t_late_aircraft_delay = normalized_t_late_aircraft_delay * -4.50 + 1.04

            # the arrival delay is more than 5min, now scale such that numbers add up!
            s_factor = t_carrier_delay + t_weather_delay + t_nas_delay + t_security_delay + t_late_aircraft_delay
            if abs(s_factor) < 0.001:
                s_factor = 1.0
            s_factor = arr_delay / s_factor
            t_carrier_delay *= s_factor
            t_weather_delay *= s_factor
            t_nas_delay *= s_factor
            t_security_delay *= s_factor
            t_late_aircraft_delay *= s_factor

            return {'year' : year, 'month' : month,
                    'day' : row['DAY_OF_MONTH'],
                    'carrier': row['OP_UNIQUE_CARRIER'],
                    'flightno' : row['OP_CARRIER_FL_NUM'],
                    'origin': row['ORIGIN_AIRPORT_ID'],
                    'dest': row['DEST_AIRPORT_ID'],
                    'distance' : row['DISTANCE'],
                    'dep_delay' : row['DEP_DELAY'],
                    'arr_delay': row['ARR_DELAY'],
                    'carrier_delay' : t_carrier_delay,
                    'weather_delay': t_weather_delay,
                    'nas_delay' : t_nas_delay,
                    'security_delay': t_security_delay,
                    'late_aircraft_delay' : t_late_aircraft_delay}
    else:
        # just return it as is
        return {'year' : year,
                'month' : month,
                'day' : row['DAY_OF_MONTH'],
                'carrier': row['OP_UNIQUE_CARRIER'],
                'flightno' : row['OP_CARRIER_FL_NUM'],
                'origin': row['ORIGIN_AIRPORT_ID'],
                'dest': row['DEST_AIRPORT_ID'],
                'distance' : row['DISTANCE'],
                'dep_delay' : row['DEP_DELAY'],
                'arr_delay': row['ARR_DELAY'],
                'carrier_delay' : row['CARRIER_DELAY'],
                'weather_delay':row['WEATHER_DELAY'],
                'nas_delay' : row['NAS_DELAY'],
                'security_delay': row['SECURITY_DELAY'],
                'late_aircraft_delay' : row['LATE_AIRCRAFT_DELAY']}

# use this here as a cheaper test function
def lines_per_file(bucket_name, obj_key, out_bucket, out_suffix, storage):
    print(f'Processing the object //{bucket_name}/{obj_key}')
    counter = 0

    data = storage.get_object(bucket_name, obj_key)

    for line in data.splitlines():
        line = line.decode('latin-1')
        counter += 1

    # write output
    data = str(counter)
    storage.put_cloudobject(data, out_bucket, out_suffix)

    return {'num_input_rows': counter,
            'path': f's3://{bucket_name}/{obj_key}',
            'output_path': f's3://{out_bucket}/{out_suffix}'}

year_lower = 2002
year_upper = 2005


def to_bool(value):
    valid = {'true': True, 't': True, 'yes': True, 'y': True, 'false': False, 'f': False, 'no': False, 'n': False, }

    if isinstance(value, bool):
        return value

    if not isinstance(value, str):
        raise ValueError('invalid literal for boolean. Not a string.')

    lower_value = value.lower()
    if lower_value in valid:
        return valid[lower_value]
    else:
        raise ValueError('invalid literal for boolean: "%s"' % value)


def parse(s):
    assert isinstance(s, str)
    # try to parse s as different types
    if s in ['', ]:
        return None
    try:
        return to_bool(s.strip())
    except:
        pass
    try:
        return int(s.strip())
    except:
        pass
    try:
        return float(s.strip())
    except:
        pass
    try:
        return json.loads(s.strip())
    except:
        pass
    # return as string, final option remaining...
    return s

def flights_pipeline_per_file(bucket_name, obj_key, out_bucket, out_suffix, storage):
    print(f'Processing the object //{bucket_name}/{obj_key}')
    counter = 0
    data = storage.get_object(bucket_name, obj_key).decode('latin-1')

    # data = open('/hot/data/flights_all/flights_on_time_performance_1987_10.csv', 'rb').read().decode('latin-1')

    # this here is the actual pipeline
    # ctx.csv(input_pattern, sampling_mode=sm) \
    #    .withColumn("features", extract_feature_vector) \
    #    .map(fill_in_delays) \
    #    .filter(lambda x: year_lower <= x['year'] <= year_upper) \
    #    .tocsv(s3_output_path)

    # this here would be a Pandas version (not supported)
    # # pandas not supported
    # df = pd.read_csv(io.StringIO(data))
    #
    # # CSV output header
    # output_columns = ['year',
    #             'month',
    #             'day',
    #             'carrier',
    #             'flightno',
    #             'origin',
    #             'dest',
    #             'distance',
    #             'dep_delay',
    #             'arr_delay',
    #             'carrier_delay',
    #             'weather_delay',
    #             'nas_delay',
    #             'security_delay',
    #             'late_aircraft_delay']
    # output = ','.join(output_columns) + '\n'
    # output_counter = 0
    # for idx, row in df.iterrows():
    #
    #     # adjust nan to become None
    #     for k in row.index:
    #         if isinstance(row[k], float) and np.isnan(row[k]):
    #             row[k] = None
    #
    #     # apply pipeline now
    #     # be fair and push filter down.
    #     if year_lower <= row['YEAR'] <= year_upper:
    #         row['features'] = extract_feature_vector(row)
    #         result = fill_in_delays(row)
    #
    #         # go through output columns and construct proper csv string (no quoting here!)
    #         output_line = ','.join([str(result[k]) if result[k] else '' for k in output_columns]) + '\n'
    #         output += output_line
    #         output_counter += 1
    #     counter += 1

    # Pure python version
    # CSV output header
    output_columns = ['year',
                      'month',
                      'day',
                      'carrier',
                      'flightno',
                      'origin',
                      'dest',
                      'distance',
                      'dep_delay',
                      'arr_delay',
                      'carrier_delay',
                      'weather_delay',
                      'nas_delay',
                      'security_delay',
                      'late_aircraft_delay']
    output = ','.join(output_columns) + '\n'
    output_counter = 0

    header = None
    for line in data.splitlines():
        # parse row properly
        if header is None:
            header = list(csv.reader([line]))[0]
            continue

        # construct row & parse types!
        elements = list(csv.reader([line]))[0]
        row = dict(zip(header, [parse(el) for el in elements]))

        # apply pipeline now
        # be fair and push filter down.
        if year_lower <= row['YEAR'] <= year_upper:
            row['features'] = extract_feature_vector(row)
            result = fill_in_delays(row)

            # go through output columns and construct proper csv string (no quoting here!)
            output_line = ','.join([str(result[k]) if result[k] else '' for k in output_columns]) + '\n'
            output += output_line
            output_counter += 1
        counter += 1

    # write output
    output_path = f's3://{out_bucket}/{out_suffix}'
    if output_counter > 0:
        put_object_with_retries(storage, output, out_bucket, out_suffix, S3_MAX_RETRIES)
        # storage.put_cloudobject(output, out_bucket, out_suffix)
    else:
        output_path = None

    return {'num_input_rows': counter,
            'num_output_rows': output_counter,
            'path': f's3://{bucket_name}/{obj_key}',
            'output_path': output_path}


## this code here is what Viton generates for flights as fallback
import json
import csv
import io
import cloudpickle
import functools


# helper row object to allow fancy integer and column based string access within UDFs!
class Row:
    def __init__(self, data, columns=None):
        assert (isinstance(data, (tuple, list)))
        assert (isinstance(columns, (tuple, list)) or columns is None)
        self.data = tuple(data)
        self.columns = tuple(columns[:len(data)]) if columns is not None else None

    def __getitem__(self, key):
        # check for int also works for bool!
        if isinstance(key, int):
            return self.data[key]
        # getitem either gets a key or slice object
        elif isinstance(key, slice):
            return self.data[key.start:key.stop:key.step]
        elif isinstance(key, str):
            if self.columns is None:
                raise KeyError("no columns defined, can't access column '{}'".format(key))
            elif key not in self.columns:
                raise KeyError("could not find column column '{}'".format(key))
            return self.data[self.columns.index(key)]
        else:
            raise IndexError()

    def __repr__(self):
        if self.columns:
            if len(self.columns) < len(self.data):
                self.columns = self.columns + [None] * (len(self.data) - len(self.columns))
            return '(' + ','.join(['{}={}'.format(c, d) for c, d in zip(self.columns, self.data)]) + ')'
        else:
            return '(' + ','.join(['{}'.format(d) for d in self.data]) + ')'


# recursive expansion of Row objects potentially present in data.
def expand_row(x):
    # Note: need to use here type construction, because isinstance fails for dict input when checking for list
    if hasattr(type(x), '__iter__') and not isinstance(x, str):
        if type(x) is tuple:
            return tuple([expand_row(el) for el in x])
        elif type(x) is list:
            return [expand_row(el) for el in x]
        elif type(x) is dict:
            return {expand_row(key): expand_row(val) for key, val in x.items()}
        else:
            raise TypeError("custom sequence type used, can't convert to data representation")
    return x.data if isinstance(x, Row) else x


def result_to_row(res, columns=None):
    # convert result to row object, i.e. deal with unpacking etc.
    # is result a dict?
    if type(res) is dict:
        # are all keys strings? If so, then unpack!
        # else, keep it as dict return object!
        if all(map(lambda k: type(k) == str, res.keys())):
            # columns become keys, values
            columns = tuple(res.keys())
            data = tuple(map(lambda k: res[k], columns))
            return Row(data, columns)

    # is it a row object?
    # => convert to tuple!
    r = expand_row(res)

    if type(r) is not tuple:
        r = (r,)
    else:
        if len(r) == 0:
            r = ((),)  # special case, empty tuple

    return Row(r, columns)


def apply_func(f, row):
    if len(row.data) != 1:
        # check how many positional arguments function has.
        # if not one, expand row into multi args!
        nargs = f.__code__.co_argcount
        if nargs != 1:
            return f(*tuple([row[i] for i in range(nargs)]))
        else:
            return f(row)
    else:
        # unwrap single element tuples.
        return f(row.data[0])


@functools.cache
def decodeUDF(n):
    if 0 == n:
        # need to make sure code is compatible, therefore do this here manually
        code = cloudpickle.dumps(extract_feature_vector)
        #code = b'\x80\x05\x95\x88\x12\x00\x00\x00\x00\x00\x00\x8c\x17\x63\x6c\x6f\x75\x64\x70\x69\x63\x6b\x6c\x65\x2e\x63\x6c\x6f\x75\x64\x70\x69\x63\x6b\x6c\x65\x94\x8c\x0e\x5f\x6d\x61\x6b\x65\x5f\x66\x75\x6e\x63\x74\x69\x6f\x6e\x94\x93\x94\x28\x68\x00\x8c\x0d\x5f\x62\x75\x69\x6c\x74\x69\x6e\x5f\x74\x79\x70\x65\x94\x93\x94\x8c\x08\x43\x6f\x64\x65\x54\x79\x70\x65\x94\x85\x94\x52\x94\x28\x4b\x01\x4b\x00\x4b\x00\x4b\x14\x4b\x0d\x4b\x43\x42\x44\x01\x00\x00\x67\x00\x64\x01\xa2\x01\x7d\x01\x67\x00\x64\x02\xa2\x01\x7d\x02\x67\x00\x64\x03\xa2\x01\x7d\x03\x7c\x00\x64\x04\x19\x00\x64\x00\x75\x00\x73\x18\x7c\x00\x64\x05\x19\x00\x64\x00\x75\x00\x72\x1c\x67\x00\x64\x06\xa2\x01\x53\x00\x7c\x00\x64\x07\x19\x00\x7d\x04\x7c\x00\x64\x08\x19\x00\x7d\x05\x7c\x00\x64\x09\x19\x00\x7d\x06\x7c\x00\x64\x0a\x19\x00\x7d\x07\x7c\x01\xa0\x00\x7c\x00\x64\x0b\x19\x00\xa1\x01\x7d\x08\x7c\x02\xa0\x00\x7c\x00\x64\x0c\x19\x00\xa1\x01\x7d\x09\x7c\x02\xa0\x00\x7c\x00\x64\x0d\x19\x00\xa1\x01\x7d\x0a\x7c\x03\xa0\x00\x7c\x00\x64\x0e\x19\x00\xa1\x01\x7d\x0b\x7c\x03\xa0\x00\x7c\x00\x64\x0f\x19\x00\xa1\x01\x7d\x0c\x7c\x00\x64\x10\x19\x00\x7d\x0d\x7c\x00\x64\x11\x19\x00\x7d\x0e\x74\x01\x74\x02\x7c\x00\x64\x04\x19\x00\x83\x01\x64\x12\x1a\x00\x83\x01\x7d\x0f\x74\x01\x74\x02\x7c\x00\x64\x05\x19\x00\x83\x01\x64\x12\x1a\x00\x83\x01\x7d\x10\x74\x01\x74\x02\x7c\x00\x64\x04\x19\x00\x83\x01\x64\x12\x16\x00\x64\x13\x1a\x00\x83\x01\x7d\x11\x74\x01\x74\x02\x7c\x00\x64\x05\x19\x00\x83\x01\x64\x12\x16\x00\x64\x13\x1a\x00\x83\x01\x7d\x12\x74\x01\x7c\x04\x83\x01\x74\x01\x7c\x05\x83\x01\x74\x01\x7c\x06\x83\x01\x74\x01\x7c\x07\x83\x01\x74\x01\x7c\x08\x83\x01\x74\x01\x7c\x0b\x83\x01\x74\x01\x7c\x0c\x83\x01\x7c\x0d\x7c\x0e\x7c\x0f\x7c\x10\x7c\x11\x7c\x12\x67\x0d\x7d\x13\x7c\x13\x53\x00\x94\x28\x4e\x28\x4e\x8c\x02\x45\x41\x94\x8c\x02\x55\x41\x94\x8c\x02\x50\x49\x94\x8c\x02\x4e\x4b\x94\x8c\x02\x50\x53\x94\x8c\x02\x41\x41\x94\x8c\x02\x4e\x57\x94\x8c\x02\x45\x56\x94\x8c\x02\x42\x36\x94\x8c\x02\x48\x50\x94\x8c\x02\x54\x57\x94\x8c\x02\x44\x4c\x94\x8c\x02\x4f\x4f\x94\x8c\x02\x46\x39\x94\x8c\x02\x59\x56\x94\x8c\x02\x54\x5a\x94\x8c\x02\x55\x53\x94\x8c\x02\x4d\x51\x94\x8c\x02\x4f\x48\x94\x8c\x02\x48\x41\x94\x8c\x06\x4d\x4c\x20\x28\x31\x29\x94\x8c\x02\x58\x45\x94\x8c\x02\x47\x34\x94\x8c\x02\x59\x58\x94\x8c\x02\x44\x48\x94\x8c\x02\x41\x53\x94\x8c\x02\x4b\x48\x94\x8c\x02\x51\x58\x94\x8c\x02\x43\x4f\x94\x8c\x02\x46\x4c\x94\x8c\x02\x56\x58\x94\x8c\x06\x50\x41\x20\x28\x31\x29\x94\x8c\x02\x57\x4e\x94\x8c\x02\x39\x45\x94\x74\x94\x28\x4e\x8c\x03\x41\x42\x45\x94\x8c\x03\x41\x42\x49\x94\x8c\x03\x41\x42\x51\x94\x8c\x03\x41\x42\x52\x94\x8c\x03\x41\x42\x59\x94\x8c\x03\x41\x43\x4b\x94\x8c\x03\x41\x43\x54\x94\x8c\x03\x41\x43\x56\x94\x8c\x03\x41\x43\x59\x94\x8c\x03\x41\x44\x4b\x94\x8c\x03\x41\x44\x51\x94\x8c\x03\x41\x45\x58\x94\x8c\x03\x41\x47\x53\x94\x8c\x03\x41\x4b\x4e\x94\x8c\x03\x41\x4c\x42\x94\x8c\x03\x41\x4c\x4f\x94\x8c\x03\x41\x4c\x53\x94\x8c\x03\x41\x4c\x57\x94\x8c\x03\x41\x4d\x41\x94\x8c\x03\x41\x4e\x43\x94\x8c\x03\x41\x4e\x49\x94\x8c\x03\x41\x50\x46\x94\x8c\x03\x41\x50\x4e\x94\x8c\x03\x41\x52\x54\x94\x8c\x03\x41\x53\x45\x94\x8c\x03\x41\x54\x4c\x94\x8c\x03\x41\x54\x57\x94\x8c\x03\x41\x54\x59\x94\x8c\x03\x41\x55\x53\x94\x8c\x03\x41\x56\x4c\x94\x8c\x03\x41\x56\x50\x94\x8c\x03\x41\x5a\x41\x94\x8c\x03\x41\x5a\x4f\x94\x8c\x03\x42\x44\x4c\x94\x8c\x03\x42\x45\x54\x94\x8c\x03\x42\x46\x46\x94\x8c\x03\x42\x46\x49\x94\x8c\x03\x42\x46\x4c\x94\x8c\x03\x42\x46\x4d\x94\x8c\x03\x42\x47\x4d\x94\x8c\x03\x42\x47\x52\x94\x8c\x03\x42\x48\x4d\x94\x8c\x03\x42\x49\x4c\x94\x8c\x03\x42\x49\x53\x94\x8c\x03\x42\x4a\x49\x94\x8c\x03\x42\x4b\x47\x94\x8c\x03\x42\x4c\x49\x94\x8c\x03\x42\x4c\x56\x94\x8c\x03\x42\x4d\x49\x94\x8c\x03\x42\x4e\x41\x94\x8c\x03\x42\x4f\x49\x94\x8c\x03\x42\x4f\x53\x94\x8c\x03\x42\x50\x54\x94\x8c\x03\x42\x51\x4b\x94\x8c\x03\x42\x51\x4e\x94\x8c\x03\x42\x52\x44\x94\x8c\x03\x42\x52\x4f\x94\x8c\x03\x42\x52\x57\x94\x8c\x03\x42\x54\x4d\x94\x8c\x03\x42\x54\x52\x94\x8c\x03\x42\x54\x56\x94\x8c\x03\x42\x55\x46\x94\x8c\x03\x42\x55\x52\x94\x8c\x03\x42\x57\x49\x94\x8c\x03\x42\x5a\x4e\x94\x8c\x03\x43\x41\x45\x94\x8c\x03\x43\x41\x4b\x94\x8c\x03\x43\x42\x4d\x94\x8c\x03\x43\x43\x52\x94\x8c\x03\x43\x44\x42\x94\x8c\x03\x43\x44\x43\x94\x8c\x03\x43\x44\x56\x94\x8c\x03\x43\x45\x43\x94\x8c\x03\x43\x47\x49\x94\x8c\x03\x43\x48\x41\x94\x8c\x03\x43\x48\x4f\x94\x8c\x03\x43\x48\x53\x94\x8c\x03\x43\x49\x43\x94\x8c\x03\x43\x49\x44\x94\x8c\x03\x43\x49\x55\x94\x8c\x03\x43\x4b\x42\x94\x8c\x03\x43\x4c\x44\x94\x8c\x03\x43\x4c\x45\x94\x8c\x03\x43\x4c\x4c\x94\x8c\x03\x43\x4c\x54\x94\x8c\x03\x43\x4d\x48\x94\x8c\x03\x43\x4d\x49\x94\x8c\x03\x43\x4d\x58\x94\x8c\x03\x43\x4e\x59\x94\x8c\x03\x43\x4f\x44\x94\x8c\x03\x43\x4f\x53\x94\x8c\x03\x43\x4f\x55\x94\x8c\x03\x43\x50\x52\x94\x8c\x03\x43\x52\x50\x94\x8c\x03\x43\x52\x57\x94\x8c\x03\x43\x53\x47\x94\x8c\x03\x43\x56\x47\x94\x8c\x03\x43\x57\x41\x94\x8c\x03\x43\x59\x53\x94\x8c\x03\x44\x41\x42\x94\x8c\x03\x44\x41\x4c\x94\x8c\x03\x44\x41\x59\x94\x8c\x03\x44\x42\x51\x94\x8c\x03\x44\x43\x41\x94\x8c\x03\x44\x44\x43\x94\x8c\x03\x44\x45\x43\x94\x8c\x03\x44\x45\x4e\x94\x8c\x03\x44\x45\x54\x94\x8c\x03\x44\x46\x57\x94\x8c\x03\x44\x48\x4e\x94\x8c\x03\x44\x49\x4b\x94\x8c\x03\x44\x4c\x47\x94\x8c\x03\x44\x4c\x48\x94\x8c\x03\x44\x52\x4f\x94\x8c\x03\x44\x52\x54\x94\x8c\x03\x44\x53\x4d\x94\x8c\x03\x44\x54\x57\x94\x8c\x03\x44\x55\x54\x94\x8c\x03\x44\x56\x4c\x94\x8c\x03\x45\x41\x52\x94\x8c\x03\x45\x41\x54\x94\x8c\x03\x45\x41\x55\x94\x8c\x03\x45\x43\x50\x94\x8c\x03\x45\x46\x44\x94\x8c\x03\x45\x47\x45\x94\x8c\x03\x45\x4b\x4f\x94\x8c\x03\x45\x4c\x4d\x94\x8c\x03\x45\x4c\x50\x94\x8c\x03\x45\x4e\x56\x94\x8c\x03\x45\x52\x49\x94\x8c\x03\x45\x53\x43\x94\x8c\x03\x45\x55\x47\x94\x8c\x03\x45\x56\x56\x94\x8c\x03\x45\x57\x4e\x94\x8c\x03\x45\x57\x52\x94\x8c\x03\x45\x59\x57\x94\x8c\x03\x46\x41\x49\x94\x8c\x03\x46\x41\x52\x94\x8c\x03\x46\x41\x54\x94\x8c\x03\x46\x41\x59\x94\x8c\x03\x46\x43\x41\x94\x8c\x03\x46\x4c\x47\x94\x8c\x03\x46\x4c\x4c\x94\x8c\x03\x46\x4c\x4f\x94\x8c\x03\x46\x4d\x4e\x94\x8c\x03\x46\x4e\x4c\x94\x8c\x03\x46\x4e\x54\x94\x8c\x03\x46\x4f\x44\x94\x8c\x03\x46\x4f\x45\x94\x8c\x03\x46\x53\x44\x94\x8c\x03\x46\x53\x4d\x94\x8c\x03\x46\x57\x41\x94\x8c\x03\x47\x43\x43\x94\x8c\x03\x47\x43\x4b\x94\x8c\x03\x47\x43\x4e\x94\x8c\x03\x47\x45\x47\x94\x8c\x03\x47\x46\x4b\x94\x8c\x03\x47\x47\x47\x94\x8c\x03\x47\x4a\x54\x94\x8c\x03\x47\x4c\x48\x94\x8c\x03\x47\x4e\x56\x94\x8c\x03\x47\x50\x54\x94\x8c\x03\x47\x52\x42\x94\x8c\x03\x47\x52\x49\x94\x8c\x03\x47\x52\x4b\x94\x8c\x03\x47\x52\x52\x94\x8c\x03\x47\x53\x4f\x94\x8c\x03\x47\x53\x50\x94\x8c\x03\x47\x53\x54\x94\x8c\x03\x47\x54\x46\x94\x8c\x03\x47\x54\x52\x94\x8c\x03\x47\x55\x43\x94\x8c\x03\x47\x55\x4d\x94\x8c\x03\x48\x44\x4e\x94\x8c\x03\x48\x47\x52\x94\x8c\x03\x48\x48\x48\x94\x8c\x03\x48\x49\x42\x94\x8c\x03\x48\x4b\x59\x94\x8c\x03\x48\x4c\x4e\x94\x8c\x03\x48\x4e\x4c\x94\x8c\x03\x48\x4f\x42\x94\x8c\x03\x48\x4f\x55\x94\x8c\x03\x48\x50\x4e\x94\x8c\x03\x48\x52\x4c\x94\x8c\x03\x48\x53\x56\x94\x8c\x03\x48\x54\x53\x94\x8c\x03\x48\x56\x4e\x94\x8c\x03\x48\x59\x41\x94\x8c\x03\x48\x59\x53\x94\x8c\x03\x49\x41\x44\x94\x8c\x03\x49\x41\x47\x94\x8c\x03\x49\x41\x48\x94\x8c\x03\x49\x43\x54\x94\x8c\x03\x49\x44\x41\x94\x8c\x03\x49\x46\x50\x94\x8c\x03\x49\x4c\x45\x94\x8c\x03\x49\x4c\x47\x94\x8c\x03\x49\x4c\x4d\x94\x8c\x03\x49\x4d\x54\x94\x8c\x03\x49\x4e\x44\x94\x8c\x03\x49\x4e\x4c\x94\x8c\x03\x49\x50\x4c\x94\x8c\x03\x49\x50\x54\x94\x8c\x03\x49\x53\x4e\x94\x8c\x03\x49\x53\x4f\x94\x8c\x03\x49\x53\x50\x94\x8c\x03\x49\x54\x48\x94\x8c\x03\x49\x54\x4f\x94\x8c\x03\x49\x59\x4b\x94\x8c\x03\x4a\x41\x43\x94\x8c\x03\x4a\x41\x4e\x94\x8c\x03\x4a\x41\x58\x94\x8c\x03\x4a\x46\x4b\x94\x8c\x03\x4a\x4c\x4e\x94\x8c\x03\x4a\x4d\x53\x94\x8c\x03\x4a\x4e\x55\x94\x8c\x03\x4a\x53\x54\x94\x8c\x03\x4b\x4f\x41\x94\x8c\x03\x4b\x53\x4d\x94\x8c\x03\x4b\x54\x4e\x94\x8c\x03\x4c\x41\x4e\x94\x8c\x03\x4c\x41\x52\x94\x8c\x03\x4c\x41\x53\x94\x8c\x03\x4c\x41\x57\x94\x8c\x03\x4c\x41\x58\x94\x8c\x03\x4c\x42\x42\x94\x8c\x03\x4c\x42\x45\x94\x8c\x03\x4c\x42\x46\x94\x8c\x03\x4c\x42\x4c\x94\x8c\x03\x4c\x43\x48\x94\x8c\x03\x4c\x43\x4b\x94\x8c\x03\x4c\x45\x58\x94\x8c\x03\x4c\x46\x54\x94\x8c\x03\x4c\x47\x41\x94\x8c\x03\x4c\x47\x42\x94\x8c\x03\x4c\x49\x48\x94\x8c\x03\x4c\x49\x54\x94\x8c\x03\x4c\x4d\x54\x94\x8c\x03\x4c\x4e\x4b\x94\x8c\x03\x4c\x4e\x59\x94\x8c\x03\x4c\x52\x44\x94\x8c\x03\x4c\x53\x45\x94\x8c\x03\x4c\x57\x42\x94\x8c\x03\x4c\x57\x53\x94\x8c\x03\x4c\x59\x48\x94\x8c\x03\x4d\x41\x46\x94\x8c\x03\x4d\x41\x5a\x94\x8c\x03\x4d\x42\x53\x94\x8c\x03\x4d\x43\x49\x94\x8c\x03\x4d\x43\x4e\x94\x8c\x03\x4d\x43\x4f\x94\x8c\x03\x4d\x43\x57\x94\x8c\x03\x4d\x44\x54\x94\x8c\x03\x4d\x44\x57\x94\x8c\x03\x4d\x45\x49\x94\x8c\x03\x4d\x45\x4d\x94\x8c\x03\x4d\x46\x45\x94\x8c\x03\x4d\x46\x52\x94\x8c\x03\x4d\x47\x4d\x94\x8c\x03\x4d\x48\x4b\x94\x8c\x03\x4d\x48\x54\x94\x8c\x03\x4d\x49\x41\x94\x8c\x03\x4d\x49\x42\x94\x8c\x03\x4d\x4b\x43\x94\x8c\x03\x4d\x4b\x45\x94\x8c\x03\x4d\x4b\x47\x94\x8c\x03\x4d\x4b\x4b\x94\x8c\x03\x4d\x4c\x42\x94\x8c\x03\x4d\x4c\x49\x94\x8c\x03\x4d\x4c\x55\x94\x8c\x03\x4d\x4d\x48\x94\x8c\x03\x4d\x4f\x42\x94\x8c\x03\x4d\x4f\x44\x94\x8c\x03\x4d\x4f\x54\x94\x8c\x03\x4d\x51\x54\x94\x8c\x03\x4d\x52\x59\x94\x8c\x03\x4d\x53\x4e\x94\x8c\x03\x4d\x53\x4f\x94\x8c\x03\x4d\x53\x50\x94\x8c\x03\x4d\x53\x59\x94\x8c\x03\x4d\x54\x48\x94\x8c\x03\x4d\x54\x4a\x94\x8c\x03\x4d\x56\x59\x94\x8c\x03\x4d\x57\x48\x94\x8c\x03\x4d\x59\x52\x94\x8c\x03\x4f\x41\x4a\x94\x8c\x03\x4f\x41\x4b\x94\x8c\x03\x4f\x47\x44\x94\x8c\x03\x4f\x47\x47\x94\x8c\x03\x4f\x47\x53\x94\x8c\x03\x4f\x4b\x43\x94\x8c\x03\x4f\x4d\x41\x94\x8c\x03\x4f\x4d\x45\x94\x8c\x03\x4f\x4e\x54\x94\x8c\x03\x4f\x52\x44\x94\x8c\x03\x4f\x52\x46\x94\x8c\x03\x4f\x52\x48\x94\x8c\x03\x4f\x54\x48\x94\x8c\x03\x4f\x54\x5a\x94\x8c\x03\x4f\x57\x42\x94\x8c\x03\x4f\x58\x52\x94\x8c\x03\x50\x41\x45\x94\x8c\x03\x50\x41\x48\x94\x8c\x03\x50\x42\x47\x94\x8c\x03\x50\x42\x49\x94\x8c\x03\x50\x44\x58\x94\x8c\x03\x50\x46\x4e\x94\x8c\x03\x50\x47\x44\x94\x8c\x03\x50\x47\x56\x94\x8c\x03\x50\x48\x46\x94\x8c\x03\x50\x48\x4c\x94\x8c\x03\x50\x48\x58\x94\x8c\x03\x50\x49\x41\x94\x8c\x03\x50\x49\x42\x94\x8c\x03\x50\x49\x45\x94\x8c\x03\x50\x49\x48\x94\x8c\x03\x50\x49\x52\x94\x8c\x03\x50\x49\x54\x94\x8c\x03\x50\x4c\x4e\x94\x8c\x03\x50\x4d\x44\x94\x8c\x03\x50\x4e\x53\x94\x8c\x03\x50\x50\x47\x94\x8c\x03\x50\x52\x43\x94\x8c\x03\x50\x53\x43\x94\x8c\x03\x50\x53\x45\x94\x8c\x03\x50\x53\x47\x94\x8c\x03\x50\x53\x4d\x94\x8c\x03\x50\x53\x50\x94\x8c\x03\x50\x55\x42\x94\x8c\x03\x50\x55\x57\x94\x8c\x03\x50\x56\x44\x94\x8c\x03\x50\x56\x55\x94\x8c\x03\x50\x57\x4d\x94\x8c\x03\x52\x41\x50\x94\x8c\x03\x52\x43\x41\x94\x8c\x03\x52\x44\x44\x94\x8c\x03\x52\x44\x4d\x94\x8c\x03\x52\x44\x52\x94\x8c\x03\x52\x44\x55\x94\x8c\x03\x52\x46\x44\x94\x8c\x03\x52\x48\x49\x94\x8c\x03\x52\x49\x43\x94\x8c\x03\x52\x49\x57\x94\x8c\x03\x52\x4b\x53\x94\x8c\x03\x52\x4e\x4f\x94\x8c\x03\x52\x4f\x41\x94\x8c\x03\x52\x4f\x43\x94\x8c\x03\x52\x4f\x50\x94\x8c\x03\x52\x4f\x52\x94\x8c\x03\x52\x4f\x57\x94\x8c\x03\x52\x53\x54\x94\x8c\x03\x52\x53\x57\x94\x8c\x03\x53\x41\x46\x94\x8c\x03\x53\x41\x4e\x94\x8c\x03\x53\x41\x54\x94\x8c\x03\x53\x41\x56\x94\x8c\x03\x53\x42\x41\x94\x8c\x03\x53\x42\x4e\x94\x8c\x03\x53\x42\x50\x94\x8c\x03\x53\x43\x43\x94\x8c\x03\x53\x43\x45\x94\x8c\x03\x53\x43\x4b\x94\x8c\x03\x53\x44\x46\x94\x8c\x03\x53\x45\x41\x94\x8c\x03\x53\x46\x42\x94\x8c\x03\x53\x46\x4f\x94\x8c\x03\x53\x47\x46\x94\x8c\x03\x53\x47\x55\x94\x8c\x03\x53\x48\x44\x94\x8c\x03\x53\x48\x52\x94\x8c\x03\x53\x48\x56\x94\x8c\x03\x53\x49\x54\x94\x8c\x03\x53\x4a\x43\x94\x8c\x03\x53\x4a\x54\x94\x8c\x03\x53\x4a\x55\x94\x8c\x03\x53\x4b\x41\x94\x8c\x03\x53\x4c\x43\x94\x8c\x03\x53\x4c\x45\x94\x8c\x03\x53\x4c\x4e\x94\x8c\x03\x53\x4d\x46\x94\x8c\x03\x53\x4d\x58\x94\x8c\x03\x53\x4e\x41\x94\x8c\x03\x53\x4f\x50\x94\x8c\x03\x53\x50\x49\x94\x8c\x03\x53\x50\x4e\x94\x8c\x03\x53\x50\x53\x94\x8c\x03\x53\x52\x51\x94\x8c\x03\x53\x54\x43\x94\x8c\x03\x53\x54\x4c\x94\x8c\x03\x53\x54\x53\x94\x8c\x03\x53\x54\x54\x94\x8c\x03\x53\x54\x58\x94\x8c\x03\x53\x55\x4e\x94\x8c\x03\x53\x55\x58\x94\x8c\x03\x53\x57\x46\x94\x8c\x03\x53\x57\x4f\x94\x8c\x03\x53\x59\x52\x94\x8c\x03\x54\x42\x4e\x94\x8c\x03\x54\x45\x58\x94\x8c\x03\x54\x4b\x49\x94\x8c\x03\x54\x4c\x48\x94\x8c\x03\x54\x4f\x4c\x94\x8c\x03\x54\x50\x41\x94\x8c\x03\x54\x52\x49\x94\x8c\x03\x54\x54\x4e\x94\x8c\x03\x54\x55\x4c\x94\x8c\x03\x54\x55\x50\x94\x8c\x03\x54\x55\x53\x94\x8c\x03\x54\x56\x43\x94\x8c\x03\x54\x56\x4c\x94\x8c\x03\x54\x57\x46\x94\x8c\x03\x54\x58\x4b\x94\x8c\x03\x54\x59\x52\x94\x8c\x03\x54\x59\x53\x94\x8c\x03\x55\x43\x41\x94\x8c\x03\x55\x49\x4e\x94\x8c\x03\x55\x53\x41\x94\x8c\x03\x55\x53\x54\x94\x8c\x03\x55\x54\x4d\x94\x8c\x03\x56\x43\x54\x94\x8c\x03\x56\x45\x4c\x94\x8c\x03\x56\x49\x53\x94\x8c\x03\x56\x4c\x44\x94\x8c\x03\x56\x50\x53\x94\x8c\x03\x57\x52\x47\x94\x8c\x03\x57\x59\x53\x94\x8c\x03\x58\x4e\x41\x94\x8c\x03\x58\x57\x41\x94\x8c\x03\x59\x41\x4b\x94\x8c\x03\x59\x41\x50\x94\x8c\x03\x59\x4b\x4d\x94\x8c\x03\x59\x4e\x47\x94\x8c\x03\x59\x55\x4d\x94\x74\x94\x28\x4e\x8c\x07\x41\x6c\x61\x62\x61\x6d\x61\x94\x8c\x06\x41\x6c\x61\x73\x6b\x61\x94\x8c\x07\x41\x72\x69\x7a\x6f\x6e\x61\x94\x8c\x08\x41\x72\x6b\x61\x6e\x73\x61\x73\x94\x8c\x0a\x43\x61\x6c\x69\x66\x6f\x72\x6e\x69\x61\x94\x8c\x08\x43\x6f\x6c\x6f\x72\x61\x64\x6f\x94\x8c\x0b\x43\x6f\x6e\x6e\x65\x63\x74\x69\x63\x75\x74\x94\x8c\x08\x44\x65\x6c\x61\x77\x61\x72\x65\x94\x8c\x07\x46\x6c\x6f\x72\x69\x64\x61\x94\x8c\x07\x47\x65\x6f\x72\x67\x69\x61\x94\x8c\x06\x48\x61\x77\x61\x69\x69\x94\x8c\x05\x49\x64\x61\x68\x6f\x94\x8c\x08\x49\x6c\x6c\x69\x6e\x6f\x69\x73\x94\x8c\x07\x49\x6e\x64\x69\x61\x6e\x61\x94\x8c\x04\x49\x6f\x77\x61\x94\x8c\x06\x4b\x61\x6e\x73\x61\x73\x94\x8c\x08\x4b\x65\x6e\x74\x75\x63\x6b\x79\x94\x8c\x09\x4c\x6f\x75\x69\x73\x69\x61\x6e\x61\x94\x8c\x05\x4d\x61\x69\x6e\x65\x94\x8c\x08\x4d\x61\x72\x79\x6c\x61\x6e\x64\x94\x8c\x0d\x4d\x61\x73\x73\x61\x63\x68\x75\x73\x65\x74\x74\x73\x94\x8c\x08\x4d\x69\x63\x68\x69\x67\x61\x6e\x94\x8c\x09\x4d\x69\x6e\x6e\x65\x73\x6f\x74\x61\x94\x8c\x0b\x4d\x69\x73\x73\x69\x73\x73\x69\x70\x70\x69\x94\x8c\x08\x4d\x69\x73\x73\x6f\x75\x72\x69\x94\x8c\x07\x4d\x6f\x6e\x74\x61\x6e\x61\x94\x8c\x08\x4e\x65\x62\x72\x61\x73\x6b\x61\x94\x8c\x06\x4e\x65\x76\x61\x64\x61\x94\x8c\x0d\x4e\x65\x77\x20\x48\x61\x6d\x70\x73\x68\x69\x72\x65\x94\x8c\x0a\x4e\x65\x77\x20\x4a\x65\x72\x73\x65\x79\x94\x8c\x0a\x4e\x65\x77\x20\x4d\x65\x78\x69\x63\x6f\x94\x8c\x08\x4e\x65\x77\x20\x59\x6f\x72\x6b\x94\x8c\x0e\x4e\x6f\x72\x74\x68\x20\x43\x61\x72\x6f\x6c\x69\x6e\x61\x94\x8c\x0c\x4e\x6f\x72\x74\x68\x20\x44\x61\x6b\x6f\x74\x61\x94\x8c\x04\x4f\x68\x69\x6f\x94\x8c\x08\x4f\x6b\x6c\x61\x68\x6f\x6d\x61\x94\x8c\x06\x4f\x72\x65\x67\x6f\x6e\x94\x8c\x0c\x50\x65\x6e\x6e\x73\x79\x6c\x76\x61\x6e\x69\x61\x94\x8c\x0b\x50\x75\x65\x72\x74\x6f\x20\x52\x69\x63\x6f\x94\x8c\x0c\x52\x68\x6f\x64\x65\x20\x49\x73\x6c\x61\x6e\x64\x94\x8c\x0e\x53\x6f\x75\x74\x68\x20\x43\x61\x72\x6f\x6c\x69\x6e\x61\x94\x8c\x0c\x53\x6f\x75\x74\x68\x20\x44\x61\x6b\x6f\x74\x61\x94\x8c\x09\x54\x65\x6e\x6e\x65\x73\x73\x65\x65\x94\x8c\x05\x54\x65\x78\x61\x73\x94\x8c\x2e\x55\x2e\x53\x2e\x20\x50\x61\x63\x69\x66\x69\x63\x20\x54\x72\x75\x73\x74\x20\x54\x65\x72\x72\x69\x74\x6f\x72\x69\x65\x73\x20\x61\x6e\x64\x20\x50\x6f\x73\x73\x65\x73\x73\x69\x6f\x6e\x73\x94\x8c\x13\x55\x2e\x53\x2e\x20\x56\x69\x72\x67\x69\x6e\x20\x49\x73\x6c\x61\x6e\x64\x73\x94\x8c\x04\x55\x74\x61\x68\x94\x8c\x07\x56\x65\x72\x6d\x6f\x6e\x74\x94\x8c\x08\x56\x69\x72\x67\x69\x6e\x69\x61\x94\x8c\x0a\x57\x61\x73\x68\x69\x6e\x67\x74\x6f\x6e\x94\x8c\x0d\x57\x65\x73\x74\x20\x56\x69\x72\x67\x69\x6e\x69\x61\x94\x8c\x09\x57\x69\x73\x63\x6f\x6e\x73\x69\x6e\x94\x8c\x07\x57\x79\x6f\x6d\x69\x6e\x67\x94\x74\x94\x8c\x0c\x43\x52\x53\x5f\x41\x52\x52\x5f\x54\x49\x4d\x45\x94\x8c\x0c\x43\x52\x53\x5f\x44\x45\x50\x5f\x54\x49\x4d\x45\x94\x28\x4e\x4e\x4e\x4e\x4e\x4e\x4e\x4e\x4e\x4e\x4e\x4e\x4e\x74\x94\x8c\x07\x51\x55\x41\x52\x54\x45\x52\x94\x8c\x05\x4d\x4f\x4e\x54\x48\x94\x8c\x0c\x44\x41\x59\x5f\x4f\x46\x5f\x4d\x4f\x4e\x54\x48\x94\x8c\x0b\x44\x41\x59\x5f\x4f\x46\x5f\x57\x45\x45\x4b\x94\x8c\x11\x4f\x50\x5f\x55\x4e\x49\x51\x55\x45\x5f\x43\x41\x52\x52\x49\x45\x52\x94\x8c\x06\x4f\x52\x49\x47\x49\x4e\x94\x8c\x04\x44\x45\x53\x54\x94\x8c\x0f\x4f\x52\x49\x47\x49\x4e\x5f\x53\x54\x41\x54\x45\x5f\x4e\x4d\x94\x8c\x0d\x44\x45\x53\x54\x5f\x53\x54\x41\x54\x45\x5f\x4e\x4d\x94\x8c\x09\x44\x45\x50\x5f\x44\x45\x4c\x41\x59\x94\x8c\x09\x41\x52\x52\x5f\x44\x45\x4c\x41\x59\x94\x4b\x64\x4b\x05\x74\x94\x8c\x05\x69\x6e\x64\x65\x78\x94\x8c\x05\x66\x6c\x6f\x61\x74\x94\x8c\x03\x69\x6e\x74\x94\x87\x94\x28\x8c\x03\x72\x6f\x77\x94\x8c\x0c\x63\x61\x72\x72\x69\x65\x72\x5f\x6c\x69\x73\x74\x94\x8c\x0c\x61\x69\x72\x70\x6f\x72\x74\x5f\x6c\x69\x73\x74\x94\x8c\x0a\x73\x74\x61\x74\x65\x5f\x6c\x69\x73\x74\x94\x8c\x07\x71\x75\x61\x72\x74\x65\x72\x94\x8c\x05\x6d\x6f\x6e\x74\x68\x94\x8c\x0c\x64\x61\x79\x5f\x6f\x66\x5f\x6d\x6f\x6e\x74\x68\x94\x8c\x0b\x64\x61\x79\x5f\x6f\x66\x5f\x77\x65\x65\x6b\x94\x8c\x07\x63\x61\x72\x72\x69\x65\x72\x94\x8c\x0e\x6f\x72\x69\x67\x69\x6e\x5f\x61\x69\x72\x70\x6f\x72\x74\x94\x8c\x0c\x64\x65\x73\x74\x5f\x61\x69\x72\x70\x6f\x72\x74\x94\x8c\x0c\x6f\x72\x69\x67\x69\x6e\x5f\x73\x74\x61\x74\x65\x94\x8c\x0a\x64\x65\x73\x74\x5f\x73\x74\x61\x74\x65\x94\x8c\x09\x64\x65\x70\x5f\x64\x65\x6c\x61\x79\x94\x8c\x09\x61\x72\x72\x5f\x64\x65\x6c\x61\x79\x94\x8c\x0c\x63\x72\x73\x5f\x61\x72\x72\x5f\x68\x6f\x75\x72\x94\x8c\x0c\x63\x72\x73\x5f\x64\x65\x70\x5f\x68\x6f\x75\x72\x94\x8c\x0c\x63\x72\x73\x5f\x61\x72\x72\x5f\x35\x6d\x69\x6e\x94\x8c\x0c\x63\x72\x73\x5f\x64\x65\x70\x5f\x35\x6d\x69\x6e\x94\x8c\x08\x66\x65\x61\x74\x75\x72\x65\x73\x94\x74\x94\x8c\x08\x3c\x73\x74\x72\x69\x6e\x67\x3e\x94\x8c\x16\x65\x78\x74\x72\x61\x63\x74\x5f\x66\x65\x61\x74\x75\x72\x65\x5f\x76\x65\x63\x74\x6f\x72\x94\x4b\x01\x43\x36\x08\x01\x08\x05\x08\x21\x18\x0a\x08\x08\x08\x03\x08\x01\x08\x01\x08\x01\x0e\x01\x0e\x01\x0e\x01\x0e\x02\x0e\x01\x08\x03\x08\x01\x14\x02\x14\x01\x18\x01\x18\x01\x12\x02\x12\x01\x0a\x01\x04\x01\x04\x01\x04\xfc\x04\x06\x94\x29\x29\x74\x94\x52\x94\x7d\x94\x28\x8c\x0b\x5f\x5f\x70\x61\x63\x6b\x61\x67\x65\x5f\x5f\x94\x4e\x8c\x08\x5f\x5f\x6e\x61\x6d\x65\x5f\x5f\x94\x8c\x08\x5f\x5f\x6d\x61\x69\x6e\x5f\x5f\x94\x75\x4e\x4e\x4e\x74\x94\x52\x94\x8c\x1c\x63\x6c\x6f\x75\x64\x70\x69\x63\x6b\x6c\x65\x2e\x63\x6c\x6f\x75\x64\x70\x69\x63\x6b\x6c\x65\x5f\x66\x61\x73\x74\x94\x8c\x12\x5f\x66\x75\x6e\x63\x74\x69\x6f\x6e\x5f\x73\x65\x74\x73\x74\x61\x74\x65\x94\x93\x94\x6a\x46\x02\x00\x00\x7d\x94\x7d\x94\x28\x6a\x43\x02\x00\x00\x6a\x3d\x02\x00\x00\x8c\x0c\x5f\x5f\x71\x75\x61\x6c\x6e\x61\x6d\x65\x5f\x5f\x94\x6a\x3d\x02\x00\x00\x8c\x0f\x5f\x5f\x61\x6e\x6e\x6f\x74\x61\x74\x69\x6f\x6e\x73\x5f\x5f\x94\x7d\x94\x8c\x0e\x5f\x5f\x6b\x77\x64\x65\x66\x61\x75\x6c\x74\x73\x5f\x5f\x94\x4e\x8c\x0c\x5f\x5f\x64\x65\x66\x61\x75\x6c\x74\x73\x5f\x5f\x94\x4e\x8c\x0a\x5f\x5f\x6d\x6f\x64\x75\x6c\x65\x5f\x5f\x94\x6a\x44\x02\x00\x00\x8c\x07\x5f\x5f\x64\x6f\x63\x5f\x5f\x94\x4e\x8c\x0b\x5f\x5f\x63\x6c\x6f\x73\x75\x72\x65\x5f\x5f\x94\x4e\x8c\x17\x5f\x63\x6c\x6f\x75\x64\x70\x69\x63\x6b\x6c\x65\x5f\x73\x75\x62\x6d\x6f\x64\x75\x6c\x65\x73\x94\x5d\x94\x8c\x0b\x5f\x5f\x67\x6c\x6f\x62\x61\x6c\x73\x5f\x5f\x94\x7d\x94\x75\x86\x94\x86\x52\x30\x2e'
        f = cloudpickle.loads(code)
        return f
    if 1 == n:
        code = cloudpickle.dumps(fill_in_delays)
        #code = b'\x80\x05\x95\xa1\x0f\x00\x00\x00\x00\x00\x00\x8c\x17\x63\x6c\x6f\x75\x64\x70\x69\x63\x6b\x6c\x65\x2e\x63\x6c\x6f\x75\x64\x70\x69\x63\x6b\x6c\x65\x94\x8c\x0e\x5f\x6d\x61\x6b\x65\x5f\x66\x75\x6e\x63\x74\x69\x6f\x6e\x94\x93\x94\x28\x68\x00\x8c\x0d\x5f\x62\x75\x69\x6c\x74\x69\x6e\x5f\x74\x79\x70\x65\x94\x93\x94\x8c\x08\x43\x6f\x64\x65\x54\x79\x70\x65\x94\x85\x94\x52\x94\x28\x4b\x01\x4b\x00\x4b\x00\x4b\x14\x4b\x10\x4b\x43\x42\x8a\x06\x00\x00\x7c\x00\x64\x01\x19\x00\x7d\x01\x7c\x00\x64\x02\x19\x00\x7d\x02\x7c\x00\x64\x03\x19\x00\x7d\x03\x7c\x01\x64\x04\x6b\x02\x72\x14\x7c\x02\x64\x05\x6b\x00\x73\x19\x7c\x01\x64\x04\x6b\x00\x90\x03\x72\x19\x7c\x03\x64\x00\x75\x00\x72\x3d\x7c\x01\x7c\x02\x7c\x00\x64\x06\x19\x00\x7c\x00\x64\x07\x19\x00\x7c\x00\x64\x08\x19\x00\x7c\x00\x64\x09\x19\x00\x7c\x00\x64\x0a\x19\x00\x7c\x00\x64\x0b\x19\x00\x7c\x00\x64\x0c\x19\x00\x64\x00\x64\x00\x64\x00\x64\x00\x64\x00\x64\x00\x64\x0d\x9c\x0f\x53\x00\x7c\x03\x64\x0e\x6b\x00\x72\x63\x7c\x01\x7c\x02\x7c\x00\x64\x06\x19\x00\x7c\x00\x64\x07\x19\x00\x7c\x00\x64\x08\x19\x00\x7c\x00\x64\x09\x19\x00\x7c\x00\x64\x0a\x19\x00\x7c\x00\x64\x0b\x19\x00\x7c\x00\x64\x0c\x19\x00\x7c\x00\x64\x03\x19\x00\x64\x00\x64\x00\x64\x00\x64\x00\x64\x00\x64\x0d\x9c\x0f\x53\x00\x7c\x03\x64\x0f\x6b\x00\x72\x8b\x7c\x03\x7d\x04\x7c\x01\x7c\x02\x7c\x00\x64\x06\x19\x00\x7c\x00\x64\x07\x19\x00\x7c\x00\x64\x08\x19\x00\x7c\x00\x64\x09\x19\x00\x7c\x00\x64\x0a\x19\x00\x7c\x00\x64\x0b\x19\x00\x7c\x00\x64\x0c\x19\x00\x7c\x00\x64\x03\x19\x00\x7c\x04\x64\x00\x64\x00\x64\x00\x64\x00\x64\x0d\x9c\x0f\x53\x00\x7c\x00\x64\x10\x19\x00\x7d\x05\x67\x00\x64\x11\xa2\x01\x7d\x06\x67\x00\x64\x12\xa2\x01\x7d\x07\x7c\x05\x64\x13\x19\x00\x7c\x06\x64\x13\x19\x00\x18\x00\x7c\x07\x64\x13\x19\x00\x1b\x00\x7c\x05\x64\x14\x19\x00\x7c\x06\x64\x14\x19\x00\x18\x00\x7c\x07\x64\x14\x19\x00\x1b\x00\x7c\x05\x64\x15\x19\x00\x7c\x06\x64\x15\x19\x00\x18\x00\x7c\x07\x64\x15\x19\x00\x1b\x00\x7c\x05\x64\x16\x19\x00\x7c\x06\x64\x16\x19\x00\x18\x00\x7c\x07\x64\x16\x19\x00\x1b\x00\x7c\x05\x64\x17\x19\x00\x7c\x06\x64\x17\x19\x00\x18\x00\x7c\x07\x64\x17\x19\x00\x1b\x00\x7c\x05\x64\x18\x19\x00\x7c\x06\x64\x18\x19\x00\x18\x00\x7c\x07\x64\x18\x19\x00\x1b\x00\x7c\x05\x64\x05\x19\x00\x7c\x06\x64\x05\x19\x00\x18\x00\x7c\x07\x64\x05\x19\x00\x1b\x00\x7c\x05\x64\x19\x19\x00\x7c\x06\x64\x19\x19\x00\x18\x00\x7c\x07\x64\x19\x19\x00\x1b\x00\x7c\x05\x64\x1a\x19\x00\x7c\x06\x64\x1a\x19\x00\x18\x00\x7c\x07\x64\x1a\x19\x00\x1b\x00\x7c\x05\x64\x1b\x19\x00\x7c\x06\x64\x1b\x19\x00\x18\x00\x7c\x07\x64\x1b\x19\x00\x1b\x00\x7c\x05\x64\x1c\x19\x00\x7c\x06\x64\x1c\x19\x00\x18\x00\x7c\x07\x64\x1c\x19\x00\x1b\x00\x7c\x05\x64\x1d\x19\x00\x7c\x06\x64\x1d\x19\x00\x18\x00\x7c\x07\x64\x1d\x19\x00\x1b\x00\x7c\x05\x64\x1e\x19\x00\x7c\x06\x64\x1e\x19\x00\x18\x00\x7c\x07\x64\x1e\x19\x00\x1b\x00\x67\x0d\x7d\x08\x7c\x08\x64\x13\x19\x00\x64\x1f\x14\x00\x7c\x08\x64\x14\x19\x00\x64\x20\x14\x00\x17\x00\x7c\x08\x64\x15\x19\x00\x64\x21\x14\x00\x17\x00\x7c\x08\x64\x16\x19\x00\x64\x22\x14\x00\x17\x00\x7c\x08\x64\x17\x19\x00\x64\x23\x14\x00\x17\x00\x7c\x08\x64\x18\x19\x00\x64\x24\x14\x00\x17\x00\x7c\x08\x64\x05\x19\x00\x64\x25\x14\x00\x17\x00\x7c\x08\x64\x19\x19\x00\x64\x26\x14\x00\x17\x00\x7c\x08\x64\x1a\x19\x00\x64\x27\x14\x00\x17\x00\x7c\x08\x64\x1b\x19\x00\x64\x28\x14\x00\x17\x00\x7c\x08\x64\x1c\x19\x00\x64\x29\x14\x00\x17\x00\x7c\x08\x64\x1d\x19\x00\x64\x2a\x14\x00\x17\x00\x7c\x08\x64\x1e\x19\x00\x64\x2b\x14\x00\x17\x00\x7d\x09\x7c\x09\x64\x2c\x14\x00\x64\x2d\x17\x00\x7d\x0a\x7c\x08\x64\x13\x19\x00\x64\x2e\x14\x00\x7c\x08\x64\x14\x19\x00\x64\x2f\x14\x00\x17\x00\x7c\x08\x64\x15\x19\x00\x64\x30\x14\x00\x17\x00\x7c\x08\x64\x16\x19\x00\x64\x31\x14\x00\x17\x00\x7c\x08\x64\x17\x19\x00\x64\x32\x14\x00\x17\x00\x7c\x08\x64\x18\x19\x00\x64\x33\x14\x00\x17\x00\x7c\x08\x64\x05\x19\x00\x64\x34\x14\x00\x17\x00\x7c\x08\x64\x19\x19\x00\x64\x35\x14\x00\x17\x00\x7c\x08\x64\x1a\x19\x00\x64\x36\x14\x00\x17\x00\x7c\x08\x64\x1b\x19\x00\x64\x37\x14\x00\x17\x00\x7c\x08\x64\x1c\x19\x00\x64\x38\x14\x00\x17\x00\x7c\x08\x64\x1d\x19\x00\x64\x39\x14\x00\x17\x00\x7c\x08\x64\x1e\x19\x00\x64\x3a\x14\x00\x17\x00\x7d\x0b\x7c\x0b\x64\x3b\x14\x00\x64\x3c\x17\x00\x7d\x0c\x7c\x08\x64\x13\x19\x00\x64\x3d\x14\x00\x7c\x08\x64\x14\x19\x00\x64\x3e\x14\x00\x17\x00\x7c\x08\x64\x15\x19\x00\x64\x3f\x14\x00\x17\x00\x7c\x08\x64\x16\x19\x00\x64\x40\x14\x00\x17\x00\x7c\x08\x64\x17\x19\x00\x64\x41\x14\x00\x17\x00\x7c\x08\x64\x18\x19\x00\x64\x42\x14\x00\x17\x00\x7c\x08\x64\x05\x19\x00\x64\x43\x14\x00\x17\x00\x7c\x08\x64\x19\x19\x00\x64\x44\x14\x00\x17\x00\x7c\x08\x64\x1a\x19\x00\x64\x45\x14\x00\x17\x00\x7c\x08\x64\x1b\x19\x00\x64\x46\x14\x00\x17\x00\x7c\x08\x64\x1c\x19\x00\x64\x28\x14\x00\x17\x00\x7c\x08\x64\x1d\x19\x00\x64\x47\x14\x00\x17\x00\x7c\x08\x64\x1e\x19\x00\x64\x48\x14\x00\x17\x00\x7d\x0d\x7c\x0d\x64\x49\x14\x00\x64\x4a\x17\x00\x7d\x0e\x7c\x08\x64\x13\x19\x00\x64\x4b\x14\x00\x7c\x08\x64\x14\x19\x00\x64\x4c\x14\x00\x17\x00\x7c\x08\x64\x15\x19\x00\x64\x4d\x14\x00\x17\x00\x7c\x08\x64\x16\x19\x00\x64\x4e\x14\x00\x17\x00\x7c\x08\x64\x17\x19\x00\x64\x4f\x14\x00\x17\x00\x7c\x08\x64\x18\x19\x00\x64\x50\x14\x00\x17\x00\x7c\x08\x64\x05\x19\x00\x64\x51\x14\x00\x17\x00\x7c\x08\x64\x19\x19\x00\x64\x52\x14\x00\x17\x00\x7c\x08\x64\x1a\x19\x00\x64\x53\x14\x00\x17\x00\x7c\x08\x64\x1b\x19\x00\x64\x54\x14\x00\x17\x00\x7c\x08\x64\x1c\x19\x00\x64\x55\x14\x00\x17\x00\x7c\x08\x64\x1d\x19\x00\x64\x56\x14\x00\x17\x00\x7c\x08\x64\x1e\x19\x00\x64\x57\x14\x00\x17\x00\x7d\x0f\x7c\x0f\x64\x58\x14\x00\x64\x59\x17\x00\x7d\x10\x7c\x08\x64\x13\x19\x00\x64\x5a\x14\x00\x7c\x08\x64\x14\x19\x00\x64\x5b\x14\x00\x17\x00\x7c\x08\x64\x15\x19\x00\x64\x5c\x14\x00\x17\x00\x7c\x08\x64\x16\x19\x00\x64\x5d\x14\x00\x17\x00\x7c\x08\x64\x17\x19\x00\x64\x5e\x14\x00\x17\x00\x7c\x08\x64\x18\x19\x00\x64\x5f\x14\x00\x17\x00\x7c\x08\x64\x05\x19\x00\x64\x60\x14\x00\x17\x00\x7c\x08\x64\x19\x19\x00\x64\x61\x14\x00\x17\x00\x7c\x08\x64\x1a\x19\x00\x64\x62\x14\x00\x17\x00\x7c\x08\x64\x1b\x19\x00\x64\x63\x14\x00\x17\x00\x7c\x08\x64\x1c\x19\x00\x64\x64\x14\x00\x17\x00\x7c\x08\x64\x1d\x19\x00\x64\x65\x14\x00\x17\x00\x7c\x08\x64\x1e\x19\x00\x64\x66\x14\x00\x17\x00\x7d\x11\x7c\x11\x64\x67\x14\x00\x64\x68\x17\x00\x7d\x12\x7c\x0a\x7c\x0c\x17\x00\x7c\x0e\x17\x00\x7c\x10\x17\x00\x7c\x12\x17\x00\x7d\x13\x74\x00\x7c\x13\x83\x01\x64\x69\x6b\x00\x90\x02\x72\xdf\x64\x6a\x7d\x13\x7c\x03\x7c\x13\x1b\x00\x7d\x13\x7c\x0a\x7c\x13\x39\x00\x7d\x0a\x7c\x0c\x7c\x13\x39\x00\x7d\x0c\x7c\x0e\x7c\x13\x39\x00\x7d\x0e\x7c\x10\x7c\x13\x39\x00\x7d\x10\x7c\x12\x7c\x13\x39\x00\x7d\x12\x7c\x01\x7c\x02\x7c\x00\x64\x06\x19\x00\x7c\x00\x64\x07\x19\x00\x7c\x00\x64\x08\x19\x00\x7c\x00\x64\x09\x19\x00\x7c\x00\x64\x0a\x19\x00\x7c\x00\x64\x0b\x19\x00\x7c\x00\x64\x0c\x19\x00\x7c\x00\x64\x03\x19\x00\x7c\x0a\x7c\x0c\x7c\x0e\x7c\x10\x7c\x12\x64\x0d\x9c\x0f\x53\x00\x7c\x01\x7c\x02\x7c\x00\x64\x06\x19\x00\x7c\x00\x64\x07\x19\x00\x7c\x00\x64\x08\x19\x00\x7c\x00\x64\x09\x19\x00\x7c\x00\x64\x0a\x19\x00\x7c\x00\x64\x0b\x19\x00\x7c\x00\x64\x0c\x19\x00\x7c\x00\x64\x03\x19\x00\x7c\x00\x64\x6b\x19\x00\x7c\x00\x64\x6c\x19\x00\x7c\x00\x64\x6d\x19\x00\x7c\x00\x64\x6e\x19\x00\x7c\x00\x64\x6f\x19\x00\x64\x0d\x9c\x0f\x53\x00\x94\x28\x4e\x8c\x04\x59\x45\x41\x52\x94\x8c\x05\x4d\x4f\x4e\x54\x48\x94\x8c\x09\x41\x52\x52\x5f\x44\x45\x4c\x41\x59\x94\x4d\xd3\x07\x4b\x06\x8c\x0c\x44\x41\x59\x5f\x4f\x46\x5f\x4d\x4f\x4e\x54\x48\x94\x8c\x11\x4f\x50\x5f\x55\x4e\x49\x51\x55\x45\x5f\x43\x41\x52\x52\x49\x45\x52\x94\x8c\x11\x4f\x50\x5f\x43\x41\x52\x52\x49\x45\x52\x5f\x46\x4c\x5f\x4e\x55\x4d\x94\x8c\x11\x4f\x52\x49\x47\x49\x4e\x5f\x41\x49\x52\x50\x4f\x52\x54\x5f\x49\x44\x94\x8c\x0f\x44\x45\x53\x54\x5f\x41\x49\x52\x50\x4f\x52\x54\x5f\x49\x44\x94\x8c\x08\x44\x49\x53\x54\x41\x4e\x43\x45\x94\x8c\x09\x44\x45\x50\x5f\x44\x45\x4c\x41\x59\x94\x28\x8c\x04\x79\x65\x61\x72\x94\x8c\x05\x6d\x6f\x6e\x74\x68\x94\x8c\x03\x64\x61\x79\x94\x8c\x07\x63\x61\x72\x72\x69\x65\x72\x94\x8c\x08\x66\x6c\x69\x67\x68\x74\x6e\x6f\x94\x8c\x06\x6f\x72\x69\x67\x69\x6e\x94\x8c\x04\x64\x65\x73\x74\x94\x8c\x08\x64\x69\x73\x74\x61\x6e\x63\x65\x94\x8c\x09\x64\x65\x70\x5f\x64\x65\x6c\x61\x79\x94\x8c\x09\x61\x72\x72\x5f\x64\x65\x6c\x61\x79\x94\x8c\x0d\x63\x61\x72\x72\x69\x65\x72\x5f\x64\x65\x6c\x61\x79\x94\x8c\x0d\x77\x65\x61\x74\x68\x65\x72\x5f\x64\x65\x6c\x61\x79\x94\x8c\x09\x6e\x61\x73\x5f\x64\x65\x6c\x61\x79\x94\x8c\x0e\x73\x65\x63\x75\x72\x69\x74\x79\x5f\x64\x65\x6c\x61\x79\x94\x8c\x13\x6c\x61\x74\x65\x5f\x61\x69\x72\x63\x72\x61\x66\x74\x5f\x64\x65\x6c\x61\x79\x94\x74\x94\x47\x00\x00\x00\x00\x00\x00\x00\x00\x47\x40\x14\x00\x00\x00\x00\x00\x00\x8c\x08\x66\x65\x61\x74\x75\x72\x65\x73\x94\x28\x47\x40\x24\xae\x2f\x90\x3b\x76\xfa\x47\xc0\x15\x48\xcf\x4a\x55\x8e\xa8\x47\xc0\x37\xc3\xd8\x1f\xe7\x26\x14\x47\xc0\x23\xe4\xee\x78\xee\xff\x27\x47\x40\x26\x2a\x87\x5e\x02\xbf\xa3\x47\x40\x3c\x71\xb6\xbe\x17\xa8\x3d\x47\x40\x41\x2b\x42\x0d\x15\xbd\x2c\x47\xc0\x0c\x37\xad\xc3\xf3\x09\x77\x47\x40\x2c\xa1\xe1\xca\x09\xf9\xd4\x47\xc0\x03\x02\x12\xe2\x2f\xe0\x6d\x47\x40\x08\xd1\x45\xba\xca\x40\xd6\x47\x40\x3f\xbf\xd2\x4a\x0f\x42\xbe\x47\x40\x3e\xa8\xda\xad\xe0\xf9\x55\x74\x94\x28\x47\x40\x18\x94\x7b\x7e\x50\x92\xea\x47\x40\x2e\xdc\x9a\x04\x22\xa4\x70\x47\x40\x0f\x9f\xdb\xdb\x07\xa3\x0d\x47\x40\x21\xea\xca\xb1\xea\x73\x51\x47\x40\x17\x4c\x2f\xf0\xde\x79\xf3\x47\x40\x24\x0f\xe2\x2e\x5d\xe1\x5d\x47\x40\x20\x69\xfc\x6e\xa5\xfa\xfc\x47\x40\x20\x55\x57\xe1\xbe\x4b\x80\x47\x40\x0a\xc3\x3d\xeb\xf3\xd9\x81\x47\x40\x22\x9a\xac\x40\x3a\x57\xc0\x47\x40\x1e\x2d\x42\xf7\x76\x6e\x9c\x47\x3f\xc6\xa9\xe6\x2d\x70\xfc\x6c\x47\x40\x2a\xa5\x58\x42\xb7\x34\xb5\x74\x94\x4b\x00\x4b\x01\x4b\x02\x4b\x03\x4b\x04\x4b\x05\x4b\x07\x4b\x08\x4b\x09\x4b\x0a\x4b\x0b\x4b\x0c\x47\x3f\xf1\xeb\x85\x1e\xb8\x51\xec\x47\x40\x11\xf5\xc2\x8f\x5c\x28\xf6\x47\x40\x0b\x5c\x28\xf5\xc2\x8f\x5c\x47\x40\x11\x1e\xb8\x51\xeb\x85\x1f\x47\x3f\xe9\xeb\x85\x1e\xb8\x51\xec\x47\x40\x14\x85\x1e\xb8\x51\xeb\x85\x47\x40\x15\x0a\x3d\x70\xa3\xd7\x0a\x47\xbf\xb1\xeb\x85\x1e\xb8\x51\xec\x47\xbf\xf6\x3d\x70\xa3\xd7\x0a\x3d\x47\x40\x05\xeb\x85\x1e\xb8\x51\xec\x47\xc0\x07\x70\xa3\xd7\x0a\x3d\x71\x47\x40\x13\x3d\x70\xa3\xd7\x0a\x3d\x47\x40\x11\x70\xa3\xd7\x0a\x3d\x71\x47\x40\x10\x3d\x70\xa3\xd7\x0a\x3d\x47\x3f\xf7\xae\x14\x7a\xe1\x47\xae\x47\x3f\xfd\x70\xa3\xd7\x0a\x3d\x71\x47\xbf\xfe\xb8\x51\xeb\x85\x1e\xb8\x47\x40\x04\xb8\x51\xeb\x85\x1e\xb8\x47\xbf\xf7\xd7\x0a\x3d\x70\xa3\xd7\x47\x40\x22\x94\x7a\xe1\x47\xae\x14\x47\x40\x1f\x85\x1e\xb8\x51\xeb\x85\x47\x3f\xf1\xc2\x8f\x5c\x28\xf5\xc3\x47\x40\x0e\xf5\xc2\x8f\x5c\x28\xf6\x47\x3f\xe2\x3d\x70\xa3\xd7\x0a\x3d\x47\x40\x11\x47\xae\x14\x7a\xe1\x48\x47\x40\x1e\x99\x99\x99\x99\x99\x9a\x47\xc0\x12\xc2\x8f\x5c\x28\xf5\xc3\x47\x3f\xb1\xeb\x85\x1e\xb8\x51\xec\x47\xc0\x14\x47\xae\x14\x7a\xe1\x48\x47\x40\x17\xcc\xcc\xcc\xcc\xcc\xcd\x47\xc0\x0a\xa3\xd7\x0a\x3d\x70\xa4\x47\x40\x22\x3d\x70\xa3\xd7\x0a\x3d\x47\x40\x05\x1e\xb8\x51\xeb\x85\x1f\x47\x3f\xa9\x99\x99\x99\x99\x99\x9a\x47\x40\x04\x14\x7a\xe1\x47\xae\x14\x47\xc0\x0a\x66\x66\x66\x66\x66\x66\x47\xbf\xf7\x0a\x3d\x70\xa3\xd7\x0a\x47\xc0\x03\x0a\x3d\x70\xa3\xd7\x0a\x47\x40\x1a\x66\x66\x66\x66\x66\x66\x47\x40\x06\xe1\x47\xae\x14\x7a\xe1\x47\x40\x08\x00\x00\x00\x00\x00\x00\x47\x40\x04\xe1\x47\xae\x14\x7a\xe1\x47\x40\x17\x99\x99\x99\x99\x99\x9a\x47\x40\x17\x7a\xe1\x47\xae\x14\x7b\x47\x40\x11\x00\x00\x00\x00\x00\x00\x47\xbf\xe5\xc2\x8f\x5c\x28\xf5\xc3\x47\x40\x0b\x33\x33\x33\x33\x33\x33\x47\x40\x16\x85\x1e\xb8\x51\xeb\x85\x47\x40\x0c\x8f\x5c\x28\xf5\xc2\x8f\x47\x40\x09\x85\x1e\xb8\x51\xeb\x85\x47\x40\x07\x33\x33\x33\x33\x33\x33\x47\x3f\xf6\xe1\x47\xae\x14\x7a\xe1\x47\x40\x0e\xe1\x47\xae\x14\x7a\xe1\x47\x40\x10\xf5\xc2\x8f\x5c\x28\xf6\x47\x40\x25\x33\x33\x33\x33\x33\x33\x47\x3f\xea\xe1\x47\xae\x14\x7a\xe1\x47\x40\x07\xc2\x8f\x5c\x28\xf5\xc3\x47\x3f\xbc\x28\xf5\xc2\x8f\x5c\x29\x47\x40\x21\x5c\x28\xf5\xc2\x8f\x5c\x47\x40\x07\x1e\xb8\x51\xeb\x85\x1f\x47\xbf\xf1\xeb\x85\x1e\xb8\x51\xec\x47\x3f\xf8\x51\xeb\x85\x1e\xb8\x52\x47\x40\x08\xcc\xcc\xcc\xcc\xcc\xcd\x47\x40\x12\xf5\xc2\x8f\x5c\x28\xf6\x47\xbf\xef\x0a\x3d\x70\xa3\xd7\x0a\x47\x3f\xf7\x85\x1e\xb8\x51\xeb\x85\x47\x40\x21\x0f\x5c\x28\xf5\xc2\x8f\x47\x3f\xe4\x28\xf5\xc2\x8f\x5c\x29\x47\x40\x1a\xae\x14\x7a\xe1\x47\xae\x47\x40\x11\xc2\x8f\x5c\x28\xf5\xc3\x47\x40\x08\xf5\xc2\x8f\x5c\x28\xf6\x47\x40\x07\x5c\x28\xf5\xc2\x8f\x5c\x47\xc0\x12\x00\x00\x00\x00\x00\x00\x47\x3f\xf0\xa3\xd7\x0a\x3d\x70\xa4\x47\x3f\x50\x62\x4d\xd2\xf1\xa9\xfc\x47\x3f\xf0\x00\x00\x00\x00\x00\x00\x8c\x0d\x43\x41\x52\x52\x49\x45\x52\x5f\x44\x45\x4c\x41\x59\x94\x8c\x0d\x57\x45\x41\x54\x48\x45\x52\x5f\x44\x45\x4c\x41\x59\x94\x8c\x09\x4e\x41\x53\x5f\x44\x45\x4c\x41\x59\x94\x8c\x0e\x53\x45\x43\x55\x52\x49\x54\x59\x5f\x44\x45\x4c\x41\x59\x94\x8c\x13\x4c\x41\x54\x45\x5f\x41\x49\x52\x43\x52\x41\x46\x54\x5f\x44\x45\x4c\x41\x59\x94\x74\x94\x8c\x03\x61\x62\x73\x94\x85\x94\x28\x8c\x03\x72\x6f\x77\x94\x68\x13\x68\x14\x68\x1c\x68\x1d\x8c\x01\x66\x94\x8c\x02\x6d\x75\x94\x8c\x03\x73\x74\x64\x94\x8c\x0c\x6e\x6f\x72\x6d\x61\x6c\x69\x7a\x65\x64\x5f\x66\x94\x8c\x1a\x6e\x6f\x72\x6d\x61\x6c\x69\x7a\x65\x64\x5f\x74\x5f\x63\x61\x72\x72\x69\x65\x72\x5f\x64\x65\x6c\x61\x79\x94\x8c\x0f\x74\x5f\x63\x61\x72\x72\x69\x65\x72\x5f\x64\x65\x6c\x61\x79\x94\x8c\x1a\x6e\x6f\x72\x6d\x61\x6c\x69\x7a\x65\x64\x5f\x74\x5f\x77\x65\x61\x74\x68\x65\x72\x5f\x64\x65\x6c\x61\x79\x94\x8c\x0f\x74\x5f\x77\x65\x61\x74\x68\x65\x72\x5f\x64\x65\x6c\x61\x79\x94\x8c\x16\x6e\x6f\x72\x6d\x61\x6c\x69\x7a\x65\x64\x5f\x74\x5f\x6e\x61\x73\x5f\x64\x65\x6c\x61\x79\x94\x8c\x0b\x74\x5f\x6e\x61\x73\x5f\x64\x65\x6c\x61\x79\x94\x8c\x1b\x6e\x6f\x72\x6d\x61\x6c\x69\x7a\x65\x64\x5f\x74\x5f\x73\x65\x63\x75\x72\x69\x74\x79\x5f\x64\x65\x6c\x61\x79\x94\x8c\x10\x74\x5f\x73\x65\x63\x75\x72\x69\x74\x79\x5f\x64\x65\x6c\x61\x79\x94\x8c\x20\x6e\x6f\x72\x6d\x61\x6c\x69\x7a\x65\x64\x5f\x74\x5f\x6c\x61\x74\x65\x5f\x61\x69\x72\x63\x72\x61\x66\x74\x5f\x64\x65\x6c\x61\x79\x94\x8c\x15\x74\x5f\x6c\x61\x74\x65\x5f\x61\x69\x72\x63\x72\x61\x66\x74\x5f\x64\x65\x6c\x61\x79\x94\x8c\x08\x73\x5f\x66\x61\x63\x74\x6f\x72\x94\x74\x94\x8c\x08\x3c\x73\x74\x72\x69\x6e\x67\x3e\x94\x8c\x0e\x66\x69\x6c\x6c\x5f\x69\x6e\x5f\x64\x65\x6c\x61\x79\x73\x94\x4b\x01\x43\xd6\x08\x04\x08\x01\x08\x01\x1a\x02\x08\x02\x04\x03\x06\x01\x06\x01\x06\x01\x06\x01\x06\x01\x06\x01\x06\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x06\xf3\x08\x0e\x04\x03\x06\x01\x06\x01\x06\x01\x06\x01\x06\x01\x06\x01\x06\x01\x06\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x06\xf3\x08\x0e\x04\x02\x04\x03\x06\x01\x06\x01\x06\x01\x06\x01\x06\x01\x06\x01\x06\x01\x06\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x06\xf3\x08\x15\x08\x01\x08\x05\xfe\x03\x24\x00\x9c\x02\x0c\x01\x9c\x02\x0c\x01\x9c\x02\x0c\x01\x9c\x02\x0c\x01\x9c\x02\x0c\x01\x14\x03\x0e\x01\x04\x01\x08\x01\x08\x01\x08\x01\x08\x01\x08\x01\x08\x01\x04\x02\x06\x01\x06\x01\x06\x01\x06\x01\x06\x01\x06\x01\x06\x01\x06\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x06\xf3\x04\x10\x06\x01\x06\x01\x06\x01\x06\x01\x06\x01\x06\x01\x06\x01\x06\x01\x06\x01\x06\x01\x06\x01\x06\x01\x06\x01\x06\xf3\x94\x29\x29\x74\x94\x52\x94\x7d\x94\x28\x8c\x0b\x5f\x5f\x70\x61\x63\x6b\x61\x67\x65\x5f\x5f\x94\x4e\x8c\x08\x5f\x5f\x6e\x61\x6d\x65\x5f\x5f\x94\x8c\x08\x5f\x5f\x6d\x61\x69\x6e\x5f\x5f\x94\x75\x4e\x4e\x4e\x74\x94\x52\x94\x8c\x1c\x63\x6c\x6f\x75\x64\x70\x69\x63\x6b\x6c\x65\x2e\x63\x6c\x6f\x75\x64\x70\x69\x63\x6b\x6c\x65\x5f\x66\x61\x73\x74\x94\x8c\x12\x5f\x66\x75\x6e\x63\x74\x69\x6f\x6e\x5f\x73\x65\x74\x73\x74\x61\x74\x65\x94\x93\x94\x68\x49\x7d\x94\x7d\x94\x28\x68\x46\x68\x40\x8c\x0c\x5f\x5f\x71\x75\x61\x6c\x6e\x61\x6d\x65\x5f\x5f\x94\x68\x40\x8c\x0f\x5f\x5f\x61\x6e\x6e\x6f\x74\x61\x74\x69\x6f\x6e\x73\x5f\x5f\x94\x7d\x94\x8c\x0e\x5f\x5f\x6b\x77\x64\x65\x66\x61\x75\x6c\x74\x73\x5f\x5f\x94\x4e\x8c\x0c\x5f\x5f\x64\x65\x66\x61\x75\x6c\x74\x73\x5f\x5f\x94\x4e\x8c\x0a\x5f\x5f\x6d\x6f\x64\x75\x6c\x65\x5f\x5f\x94\x68\x47\x8c\x07\x5f\x5f\x64\x6f\x63\x5f\x5f\x94\x4e\x8c\x0b\x5f\x5f\x63\x6c\x6f\x73\x75\x72\x65\x5f\x5f\x94\x4e\x8c\x17\x5f\x63\x6c\x6f\x75\x64\x70\x69\x63\x6b\x6c\x65\x5f\x73\x75\x62\x6d\x6f\x64\x75\x6c\x65\x73\x94\x5d\x94\x8c\x0b\x5f\x5f\x67\x6c\x6f\x62\x61\x6c\x73\x5f\x5f\x94\x7d\x94\x75\x86\x94\x86\x52\x30\x2e'
        f = cloudpickle.loads(code)
        return f
    if 2 == n:
        code = cloudpickle.dumps(lambda row: year_lower <= row['year'] <= year_upper)
        #code = b'\x80\x05\x95\xce\x01\x00\x00\x00\x00\x00\x00\x8c\x17\x63\x6c\x6f\x75\x64\x70\x69\x63\x6b\x6c\x65\x2e\x63\x6c\x6f\x75\x64\x70\x69\x63\x6b\x6c\x65\x94\x8c\x0e\x5f\x6d\x61\x6b\x65\x5f\x66\x75\x6e\x63\x74\x69\x6f\x6e\x94\x93\x94\x28\x68\x00\x8c\x0d\x5f\x62\x75\x69\x6c\x74\x69\x6e\x5f\x74\x79\x70\x65\x94\x93\x94\x8c\x08\x43\x6f\x64\x65\x54\x79\x70\x65\x94\x85\x94\x52\x94\x28\x4b\x01\x4b\x00\x4b\x00\x4b\x01\x4b\x03\x4b\x43\x43\x1c\x64\x01\x7c\x00\x64\x02\x19\x00\x04\x00\x03\x00\x6b\x01\x6f\x0b\x64\x03\x6b\x01\x53\x00\x02\x00\x01\x00\x53\x00\x94\x28\x4e\x4d\xd0\x07\x8c\x04\x79\x65\x61\x72\x94\x4d\xd5\x07\x74\x94\x29\x8c\x03\x72\x6f\x77\x94\x85\x94\x8c\x08\x3c\x73\x74\x72\x69\x6e\x67\x3e\x94\x8c\x08\x3c\x6c\x61\x6d\x62\x64\x61\x3e\x94\x4b\x01\x43\x02\x1c\x00\x94\x29\x29\x74\x94\x52\x94\x7d\x94\x28\x8c\x0b\x5f\x5f\x70\x61\x63\x6b\x61\x67\x65\x5f\x5f\x94\x4e\x8c\x08\x5f\x5f\x6e\x61\x6d\x65\x5f\x5f\x94\x8c\x08\x5f\x5f\x6d\x61\x69\x6e\x5f\x5f\x94\x75\x4e\x4e\x4e\x74\x94\x52\x94\x8c\x1c\x63\x6c\x6f\x75\x64\x70\x69\x63\x6b\x6c\x65\x2e\x63\x6c\x6f\x75\x64\x70\x69\x63\x6b\x6c\x65\x5f\x66\x61\x73\x74\x94\x8c\x12\x5f\x66\x75\x6e\x63\x74\x69\x6f\x6e\x5f\x73\x65\x74\x73\x74\x61\x74\x65\x94\x93\x94\x68\x17\x7d\x94\x7d\x94\x28\x68\x14\x68\x0e\x8c\x0c\x5f\x5f\x71\x75\x61\x6c\x6e\x61\x6d\x65\x5f\x5f\x94\x68\x0e\x8c\x0f\x5f\x5f\x61\x6e\x6e\x6f\x74\x61\x74\x69\x6f\x6e\x73\x5f\x5f\x94\x7d\x94\x8c\x0e\x5f\x5f\x6b\x77\x64\x65\x66\x61\x75\x6c\x74\x73\x5f\x5f\x94\x4e\x8c\x0c\x5f\x5f\x64\x65\x66\x61\x75\x6c\x74\x73\x5f\x5f\x94\x4e\x8c\x0a\x5f\x5f\x6d\x6f\x64\x75\x6c\x65\x5f\x5f\x94\x68\x15\x8c\x07\x5f\x5f\x64\x6f\x63\x5f\x5f\x94\x4e\x8c\x0b\x5f\x5f\x63\x6c\x6f\x73\x75\x72\x65\x5f\x5f\x94\x4e\x8c\x17\x5f\x63\x6c\x6f\x75\x64\x70\x69\x63\x6b\x6c\x65\x5f\x73\x75\x62\x6d\x6f\x64\x75\x6c\x65\x73\x94\x5d\x94\x8c\x0b\x5f\x5f\x67\x6c\x6f\x62\x61\x6c\x73\x5f\x5f\x94\x7d\x94\x75\x86\x94\x86\x52\x30\x2e'
        f = cloudpickle.loads(code)
        return f
    return None


def pipeline_stage_0(input_row, parse_cells=False):
    res = {'outputRows': []}
    for _ in range(1):
        if not isinstance(input_row, (tuple, list)):
            res['exception'] = TypeError('cell input must be of string type')
            res['exceptionOperatorID'] = 100015
            res['inputRow'] = input_row
            return res

        # special conversion function for boolean necessary
        def to_bool(value):
            valid = {'true': True, 't': True, 'yes': True, 'y': True, 'false': False, 'f': False, 'no': False,
                     'n': False, }

            if isinstance(value, bool):
                return value

            if not isinstance(value, str):
                raise ValueError('invalid literal for boolean. Not a string.')

            lower_value = value.lower()
            if lower_value in valid:
                return valid[lower_value]
            else:
                raise ValueError('invalid literal for boolean: "%s"' % value)

        def parse(s):
            assert isinstance(s, str)
            # try to parse s as different types
            if s in ['', ]:
                return None
            try:
                return to_bool(s.strip())
            except:
                pass
            try:
                return int(s.strip())
            except:
                pass
            try:
                return float(s.strip())
            except:
                pass
            try:
                return json.loads(s.strip())
            except:
                pass
            # return as string, final option remaining...
            return s

        parsed_row = [parse(el) for el in input_row] if parse_cells else list(input_row)
        row = Row(parsed_row,
                  ['YEAR', 'QUARTER', 'MONTH', 'DAY_OF_MONTH', 'DAY_OF_WEEK', 'FL_DATE', 'OP_UNIQUE_CARRIER',
                   'OP_CARRIER_AIRLINE_ID', 'OP_CARRIER', 'TAIL_NUM', 'OP_CARRIER_FL_NUM', 'ORIGIN_AIRPORT_ID',
                   'ORIGIN_AIRPORT_SEQ_ID', 'ORIGIN_CITY_MARKET_ID', 'ORIGIN', 'ORIGIN_CITY_NAME', 'ORIGIN_STATE_ABR',
                   'ORIGIN_STATE_FIPS', 'ORIGIN_STATE_NM', 'ORIGIN_WAC', 'DEST_AIRPORT_ID', 'DEST_AIRPORT_SEQ_ID',
                   'DEST_CITY_MARKET_ID', 'DEST', 'DEST_CITY_NAME', 'DEST_STATE_ABR', 'DEST_STATE_FIPS',
                   'DEST_STATE_NM', 'DEST_WAC', 'CRS_DEP_TIME', 'DEP_TIME', 'DEP_DELAY', 'DEP_DELAY_NEW', 'DEP_DEL15',
                   'DEP_DELAY_GROUP', 'DEP_TIME_BLK', 'TAXI_OUT', 'WHEELS_OFF', 'WHEELS_ON', 'TAXI_IN', 'CRS_ARR_TIME',
                   'ARR_TIME', 'ARR_DELAY', 'ARR_DELAY_NEW', 'ARR_DEL15', 'ARR_DELAY_GROUP', 'ARR_TIME_BLK',
                   'CANCELLED', 'CANCELLATION_CODE', 'DIVERTED', 'CRS_ELAPSED_TIME', 'ACTUAL_ELAPSED_TIME', 'AIR_TIME',
                   'FLIGHTS', 'DISTANCE', 'DISTANCE_GROUP', 'CARRIER_DELAY', 'WEATHER_DELAY', 'NAS_DELAY',
                   'SECURITY_DELAY', 'LATE_AIRCRAFT_DELAY', 'FIRST_DEP_TIME', 'TOTAL_ADD_GTIME', 'LONGEST_ADD_GTIME',
                   'DIV_AIRPORT_LANDINGS', 'DIV_REACHED_DEST', 'DIV_ACTUAL_ELAPSED_TIME', 'DIV_ARR_DELAY',
                   'DIV_DISTANCE', 'DIV1_AIRPORT', 'DIV1_AIRPORT_ID', 'DIV1_AIRPORT_SEQ_ID', 'DIV1_WHEELS_ON',
                   'DIV1_TOTAL_GTIME', 'DIV1_LONGEST_GTIME', 'DIV1_WHEELS_OFF', 'DIV1_TAIL_NUM', 'DIV2_AIRPORT',
                   'DIV2_AIRPORT_ID', 'DIV2_AIRPORT_SEQ_ID', 'DIV2_WHEELS_ON', 'DIV2_TOTAL_GTIME', 'DIV2_LONGEST_GTIME',
                   'DIV2_WHEELS_OFF', 'DIV2_TAIL_NUM', 'DIV3_AIRPORT', 'DIV3_AIRPORT_ID', 'DIV3_AIRPORT_SEQ_ID',
                   'DIV3_WHEELS_ON', 'DIV3_TOTAL_GTIME', 'DIV3_LONGEST_GTIME', 'DIV3_WHEELS_OFF', 'DIV3_TAIL_NUM',
                   'DIV4_AIRPORT', 'DIV4_AIRPORT_ID', 'DIV4_AIRPORT_SEQ_ID', 'DIV4_WHEELS_ON', 'DIV4_TOTAL_GTIME',
                   'DIV4_LONGEST_GTIME', 'DIV4_WHEELS_OFF', 'DIV4_TAIL_NUM', 'DIV5_AIRPORT', 'DIV5_AIRPORT_ID',
                   'DIV5_AIRPORT_SEQ_ID', 'DIV5_WHEELS_ON', 'DIV5_TOTAL_GTIME', 'DIV5_LONGEST_GTIME', 'DIV5_WHEELS_OFF',
                   'DIV5_TAIL_NUM', '', ])
        res['outputColumns'] = ['YEAR', 'QUARTER', 'MONTH', 'DAY_OF_MONTH', 'DAY_OF_WEEK', 'FL_DATE',
                                'OP_UNIQUE_CARRIER', 'OP_CARRIER_AIRLINE_ID', 'OP_CARRIER', 'TAIL_NUM',
                                'OP_CARRIER_FL_NUM', 'ORIGIN_AIRPORT_ID', 'ORIGIN_AIRPORT_SEQ_ID',
                                'ORIGIN_CITY_MARKET_ID', 'ORIGIN', 'ORIGIN_CITY_NAME', 'ORIGIN_STATE_ABR',
                                'ORIGIN_STATE_FIPS', 'ORIGIN_STATE_NM', 'ORIGIN_WAC', 'DEST_AIRPORT_ID',
                                'DEST_AIRPORT_SEQ_ID', 'DEST_CITY_MARKET_ID', 'DEST', 'DEST_CITY_NAME',
                                'DEST_STATE_ABR', 'DEST_STATE_FIPS', 'DEST_STATE_NM', 'DEST_WAC', 'CRS_DEP_TIME',
                                'DEP_TIME', 'DEP_DELAY', 'DEP_DELAY_NEW', 'DEP_DEL15', 'DEP_DELAY_GROUP',
                                'DEP_TIME_BLK', 'TAXI_OUT', 'WHEELS_OFF', 'WHEELS_ON', 'TAXI_IN', 'CRS_ARR_TIME',
                                'ARR_TIME', 'ARR_DELAY', 'ARR_DELAY_NEW', 'ARR_DEL15', 'ARR_DELAY_GROUP',
                                'ARR_TIME_BLK', 'CANCELLED', 'CANCELLATION_CODE', 'DIVERTED', 'CRS_ELAPSED_TIME',
                                'ACTUAL_ELAPSED_TIME', 'AIR_TIME', 'FLIGHTS', 'DISTANCE', 'DISTANCE_GROUP',
                                'CARRIER_DELAY', 'WEATHER_DELAY', 'NAS_DELAY', 'SECURITY_DELAY', 'LATE_AIRCRAFT_DELAY',
                                'FIRST_DEP_TIME', 'TOTAL_ADD_GTIME', 'LONGEST_ADD_GTIME', 'DIV_AIRPORT_LANDINGS',
                                'DIV_REACHED_DEST', 'DIV_ACTUAL_ELAPSED_TIME', 'DIV_ARR_DELAY', 'DIV_DISTANCE',
                                'DIV1_AIRPORT', 'DIV1_AIRPORT_ID', 'DIV1_AIRPORT_SEQ_ID', 'DIV1_WHEELS_ON',
                                'DIV1_TOTAL_GTIME', 'DIV1_LONGEST_GTIME', 'DIV1_WHEELS_OFF', 'DIV1_TAIL_NUM',
                                'DIV2_AIRPORT', 'DIV2_AIRPORT_ID', 'DIV2_AIRPORT_SEQ_ID', 'DIV2_WHEELS_ON',
                                'DIV2_TOTAL_GTIME', 'DIV2_LONGEST_GTIME', 'DIV2_WHEELS_OFF', 'DIV2_TAIL_NUM',
                                'DIV3_AIRPORT', 'DIV3_AIRPORT_ID', 'DIV3_AIRPORT_SEQ_ID', 'DIV3_WHEELS_ON',
                                'DIV3_TOTAL_GTIME', 'DIV3_LONGEST_GTIME', 'DIV3_WHEELS_OFF', 'DIV3_TAIL_NUM',
                                'DIV4_AIRPORT', 'DIV4_AIRPORT_ID', 'DIV4_AIRPORT_SEQ_ID', 'DIV4_WHEELS_ON',
                                'DIV4_TOTAL_GTIME', 'DIV4_LONGEST_GTIME', 'DIV4_WHEELS_OFF', 'DIV4_TAIL_NUM',
                                'DIV5_AIRPORT', 'DIV5_AIRPORT_ID', 'DIV5_AIRPORT_SEQ_ID', 'DIV5_WHEELS_ON',
                                'DIV5_TOTAL_GTIME', 'DIV5_LONGEST_GTIME', 'DIV5_WHEELS_OFF', 'DIV5_TAIL_NUM', '', ]
        try:
            #f = decodeUDF(0) # <-- doesn't work b.c. of functools
            f = extract_feature_vector
            call_res = apply_func(f, row)
            if row.columns and 'features' in row.columns:
                col_idx = row.columns.index('features')
                tmp = list(row.data)
                tmp[col_idx] = expand_row(call_res)
                row.data = tuple(tmp)
            else:
                row.columns = row.columns + ('features',) if row.columns is not None else tuple(
                    [None] * len(row.data)) + ('features',)
                row.data = row.data + result_to_row(call_res).data
        except Exception as e:
            res['exception'] = e
            res['exceptionOperatorID'] = 100016
            res['inputRow'] = input_row
            return res
        try:
            # f = decodeUDF(1) # <-- doesn't work because of functools
            f = fill_in_delays
            call_res = apply_func(f, row)
            row = result_to_row(call_res, row.columns)
        except Exception as e:
            res['exception'] = e
            res['exceptionOperatorID'] = 100017
            res['inputRow'] = input_row
            return res
        try:
            # f = decodeUDF(2) # <-- doesn't work because of functools
            f = lambda row: year_lower <= row['year'] <= year_upper
            call_res = apply_func(f, row)
            if not call_res:
                continue
        except Exception as e:
            res['exception'] = e
            res['exceptionOperatorID'] = 100018
            res['inputRow'] = input_row
            return res
        buf = io.StringIO()
        w = csv.writer(buf, delimiter=',', quotechar='"', quoting=csv.QUOTE_MINIMAL, lineterminator='\n')
        w.writerow(row.data)
        csvSerialized = buf.getvalue()
        res['outputRows'] += [csvSerialized]
        res['outputColumns'] = row.columns
    return res


# now create lithops function to execute the Viton fallback code properly
def flights_pipeline_per_file_with_viton_code(bucket_name, obj_key, out_bucket, out_suffix, storage):
    print(f'Processing the object //{bucket_name}/{obj_key}')
    counter = 0
    data = storage.get_object(bucket_name, obj_key).decode('latin-1')

    #data = open('/hot/data/flights_all/flights_on_time_performance_2002_10.csv', 'rb').read().decode('latin-1')

    # Pure python version
    # CSV output header
    output_columns = ['year',
                      'month',
                      'day',
                      'carrier',
                      'flightno',
                      'origin',
                      'dest',
                      'distance',
                      'dep_delay',
                      'arr_delay',
                      'carrier_delay',
                      'weather_delay',
                      'nas_delay',
                      'security_delay',
                      'late_aircraft_delay']
    output = ','.join(output_columns) + '\n'
    output_counter = 0

    header = None
    for line in data.splitlines():
        # parse row properly
        if header is None:
            header = list(csv.reader([line]))[0]
            continue

        # construct row & parse types!
        elements = list(csv.reader([line]))[0]

        # call viton code
        res = pipeline_stage_0(elements, True)
        # ignore exceptions, simply check for output row
        if 'outputRows' in res.keys():
            output += ''.join(res['outputRows'])  # <-- rows are already '\n' terminated
            output_counter += 1
        counter += 1

    # write output
    output_path = f's3://{out_bucket}/{out_suffix}'
    if output_counter > 0:
        put_object_with_retries(storage, output, out_bucket, out_suffix, 5)
    else:
        output_path = None

    return {'num_input_rows': counter,
            'num_output_rows': output_counter,
            'path': f's3://{bucket_name}/{obj_key}',
            'output_path': output_path}

if __name__ == '__main__':

    logging.basicConfig(format='%(asctime)s: %(levelname)s: %(message)s', level=logging.INFO)
    logger = logging.getLogger()
    logger.setLevel(logging.INFO)

    parser = argparse.ArgumentParser(description='Lithops flights query')
    parser.add_argument('--mode', dest='mode', choices=['custom', 'viton'], default='custom')
    args = parser.parse_args()

    mode = args.mode

    # config
    input_pattern = 's3://tuplex-public/data/flights_all/flights_on_time_performance_2003_*.csv'
    s3_output_path = 's3://tuplex-leonhard/experiments/flights_lithops'

    bucket_name = 'tuplex-public'
    obj_key = 'data/flights_all/flights_on_time_performance_1987_10.csv'
    s3_output_bucket = 'tuplex-leonhard'
    s3_output_suffix = 'experiments/flights_lithops/' + os.path.basename(obj_key)


    # start job here
    tstart = time.time()

    storage = lithops.Storage()
    s3paths = storage.list_objects(bucket_name, 'data/flights_all/flights_on_time')
    logging.info(f'found {len(s3paths)} S3 paths to process')

    fexec = lithops.FunctionExecutor(runtime_memory=10000, max_workers=410)

    args = []
    for path in s3paths:
        output_suffix = 'experiments/flights_lithops/' + os.path.basename(path['Key'])
        args.append((bucket_name, path['Key'], s3_output_bucket, output_suffix))


    # ## for testing, use first file
    # args = args[:1]
    #
    # # # test function locally
    # ret = flights_pipeline_per_file_with_viton_code(*args[0], storage)
    # sys.exit(0)
    # # ret = flights_pipeline_per_file(*args[0], storage)
    # # print(ret)

    # start function invocations
    # code for single invocation, but want multiple ones
    # fexec.call_async(flights_pipeline_per_file, (bucket_name, obj_key, s3_output_bucket, s3_output_suffix))

    # which mode to execute? custom or viton?

    if mode == 'custom':
        fexec.map(flights_pipeline_per_file, args)
    elif mode == 'viton':
        fexec.map(flights_pipeline_per_file_with_viton_code, args)
    else:
        raise Exception(f'Unsupported mode {mode} encountered.')

    ret = fexec.get_result()
    logging.info('Result obtained from Lambda invocation: {}'.format(ret))

    total_rows_read = 0
    for entry in ret:
        total_rows_read += entry['num_input_rows']

    logging.info(f'Read in total {total_rows_read} input rows')

    # print out details
    keys = sorted(list(ret[0].keys()))
    info = ','.join(keys) + '\n'
    for entry in ret:
        info += ','.join([str(entry[k]) for k in keys]) + '\n'
    print('detailed results::\n' + info)

    # calculate cost for lithops
    futures = fexec.futures
    mbs = 0
    lambda_total_time = 0
    for f in futures:
        mbs += f.runtime_memory * f.stats['worker_exec_time']
        lambda_total_time += f.stats['worker_exec_time']
    cost_per_request = 0.0000002
    cost_per_gb_second_x86 = 0.0000166667
    gbs = mbs / 1000.0 # convert to Gigabyte seconds
    cost = cost_per_request * len(futures) + gbs * cost_per_gb_second_x86
    logging.info(f'Cost of query: ${cost}')

    job_time = time.time() - tstart

    stats = {'cost': cost, 'lambda_total_time': lambda_total_time, 'job_time': job_time, 'mode': mode}
    logging.info(f'Stats: {json.dumps(stats)}')
    print(json.dumps(stats))
    fexec.plot()
